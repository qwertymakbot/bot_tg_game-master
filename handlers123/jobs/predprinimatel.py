import os

from bot import check_user, database, types, username_2, parser, bot, Dispatcher, res_database, add_time_min, scheduler, \
    InlineKeyboardMarkup, InlineKeyboardButton
import json
import pytz
import datetime
import asyncio
from bot import username


# /mybus –ú–æ–π –±–∏–∑–Ω–µ—Å
async def mybus(message: types.Message):
    # –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –∫—É–ø–∏–ª —Å—Ç—Ä–∞–Ω—É —Å—Ä–∞–∑—É –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω
    await check_user(message)
    bus_data = database.users_bus.find_one({'id': message.from_user.id})
    if bus_data is None:
        await message.answer(f'{await username(message)}, —É –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞!', parse_mode='HTML')
    else:
        work_people = database.autocreater_work.find_one({'boss': message.from_user.id})
        await message.answer(f'{await username(message)}, –≤–∞—à –±–∏–∑–Ω–µ—Å:\n'
                             f'‚Ñ¢Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {bus_data["name"]}\n'
                             f'üõ† –ß—Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: {bus_data["product"]}\n'
                             f'üë®‚Äçüè´ –ê–≤—Ç–æ—Å–±–æ—Ä—â–∏–∫–æ–≤: {len(work_people["work_place"])} –∏–∑ {bus_data["work_place"]} —á–µ–ª.\n'
                             f'üïê –í—Ä–µ–º—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ 1 –µ–¥–∏–Ω–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ü–∏–∏: {bus_data["time_to_create"]} –º–∏–Ω—É—Ç\n\n'
                             f'‚ùóÔ∏è –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –±–∏–∑–Ω–µ—Å–∞ –≤–≤–µ–¥–∏—Ç–µ /sell_bus', parse_mode='HTML')


# /sell_bus –ü—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å
async def sell_bus(message: types.Message):
    await check_user(message)
    user_info = database.users.find_one({'id': message.from_user.id})
    if user_info['job'] == '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å':
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –±–∏–∑–Ω–µ—Å —É–∂–µ
        bus_info = database.users_bus.find_one({'id': message.from_user.id})
        if bus_info is not None:
            key = types.InlineKeyboardMarkup()
            but_yes = types.InlineKeyboardButton(text='–ü—Ä–æ–¥–∞—Ç—å',
                                                 callback_data=f'sell_bus_{str(message.from_user.id)[-3::]}_{bus_info["cost"] * 0.5}')
            but_no = types.InlineKeyboardButton(text='–ù–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å',
                                                callback_data=f'cancel_bus_{str(message.from_user.id)[-3::]}')
            key.add(but_no, but_yes)
            await message.answer(
                f'{await username(message)}, –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å –∑–∞ {bus_info["cost"] * 0.5}$',
                reply_markup=key, parse_mode='HTML')
        else:
            await message.answer(f'{await username(message)}, —É –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞!', parse_mode='HTML')


# buy - –∫—É–ø–∏–ª —Ç–æ–ª—å–∫–æ —á—Ç–æ
# need_builders - –Ω–∞–±–æ—Ä —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π
# building - —Å—Ç—Ä–æ–∏—Ç—Å—è
# work - —Ä–∞–±–æ—Ç–∞–µ—Ç
# /build_bus –°—Ç—Ä–æ–∏—Ç—å –±–∏–∑–Ω–µ—Å
async def build_bus(message: types.Message):
    await check_user(message)
    user_info = database.users.find_one({'id': message.from_user.id})
    if user_info['job'] == '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å':
        users_bus = database.users_bus.find_one({'boss': message.from_user.id})
        if users_bus is None:
            await bot.send_message(message.chat.id, f'{await username(message)}, –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å!',
                                   parse_mode='HTML')
            return
        if users_bus['status'] == 'buy':
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–∏–∑–Ω–µ—Å–∞
            database.users_bus.update_one({'boss': message.from_user.id}, {'$set': {'status': 'need_builders'}})
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–æ–π–∫–µ
            builders = list(database.builders_work.find({'boss': message.from_user.id}))
            if len(builders) == users_bus["need_builder"]:
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–∏–∑–Ω–µ—Å–∞
                database.users_bus.update_one({'boss': message.from_user.id}, {'$set': {'status': 'building'}})
                # SCHEDULER
                res_database.build_bus.insert_one({'boss': message.from_user.id,
                                                   'time': await add_time_min(1440)})
                tz = pytz.timezone('Etc/GMT-3')
                scheduler.add_job(end_build_bus, "date",
                                  run_date=await add_time_min(1440),
                                  args=(message.from_user.id,), timezone=tz)
                await bot.send_message(message.chat.id,
                                       f'{await username(message)}, –Ω–∞—á–∞–ª —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–∞ {users_bus["name"]} {users_bus["product"]}\n'
                                       f'‚ùóÔ∏è –°—Ç—Ä–æ–π–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ ‚ùóÔ∏è')
            else:
                await bot.send_message(message.chat.id,
                                       f'{await username(message)}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π, –Ω—É–∂–Ω–æ –µ—â—ë {users_bus["need_builder"] - len(builders)}')
        if users_bus['status'] == 'need_builders':
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–æ–π–∫–µ
            builders = list(database.builders_work.find({'boss': message.from_user.id}))
            if len(builders) == users_bus["need_builder"]:
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–∏–∑–Ω–µ—Å–∞
                database.users_bus.update_one({'boss': message.from_user.id}, {'$set': {'status': 'building'}})
                # SCHEDULER
                res_database.build_bus.insert_one({'boss': message.from_user.id,
                                                   'time': await add_time_min(1440)})
                tz = pytz.timezone('Etc/GMT-3')
                scheduler.add_job(end_build_bus, "date",
                                  run_date=await add_time_min(1440),
                                  args=(message.from_user.id,), timezone=tz)
                await bot.send_message(message.chat.id,
                                       f'{await username(message)}, –Ω–∞—á–∞–ª —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–∞ {users_bus["name"]} {users_bus["product"]}\n'
                                       f'‚ùóÔ∏è –°—Ç—Ä–æ–π–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ ‚ùóÔ∏è')
            else:
                await bot.send_message(message.chat.id,
                                       f'{await username(message)}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π, –Ω—É–∂–Ω–æ –µ—â—ë {users_bus["need_builder"] - len(builders)}')
        if users_bus["status"] == 'building':
            res_building = res_database.build_bus.find_one({'boss': message.from_user.id})
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å —Å—Ç—Ä–æ–∫–∏
            tz = pytz.timezone('Etc/GMT-3')
            date, time = res_building['time'].split(' ')
            year, month, day = date.split('-')
            hour, minute, second = time.split(':')
            time_job = datetime.datetime(int(year), int(month), int(day), int(hour), int(minute), int(second))
            time_now = datetime.datetime(datetime.datetime.now(tz=tz).year, datetime.datetime.now(tz=tz).month,
                                         datetime.datetime.now(tz=tz).day, datetime.datetime.now(tz=tz).hour,
                                         datetime.datetime.now(tz=tz).minute, datetime.datetime.now(tz=tz).second)
            result = time_job - time_now
            await bot.send_message(message.chat.id,
                                   f'{await username(message)}, –≤—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ, –≤–∞–º –µ—â—ë –æ—Å—Ç–∞–ª–æ—Å—å {result}',
                                   parse_mode='HTML')
        else:
            await bot.send_message(message.chat.id, f'{await username(message)}, –≤—ã —É–∂–µ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å!')
    else:
        await bot.send_message(
            f'{await username_2(message.from_user.id, message.from_user.first_name)}, –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—é',
            parse_mode='HTML')


# /cancel_bus –û—Ç–º–µ–Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
async def cancel_bus(message):
    await check_user(message)
    user_info = database.users.find_one({'id': message.from_user.id})
    if user_info['job'] == '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å':
        try:
            path = os.getcwd()
            with open(f'{path}/game/build_bus/{message.from_user.id}.json', 'r', encoding='utf-8') as f:
                build_data = json.load(f)
                isbuilding = build_data['isbuilding']
                f.close()
                if not isbuilding:
                    # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ –±–∏–∑–Ω–µ—Å–µ
                    data = {'oil': build_data['oil'],
                            'food': build_data['food'],
                            'cost': build_data['cost'],
                            'builders': build_data['builders'],
                            'builder_pay': build_data['builder_pay']}
                    path = os.getcwd()
                    with open(f'{path}/game/cancel_bus/{message.from_user.id}.json', 'w', encoding='utf-8') as f:
                        json.dump(data, f)
                        f.close()
                    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    key = types.InlineKeyboardMarkup()
                    but_yes = types.InlineKeyboardButton(text='–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è', callback_data='–°—Ç—Ä–æ–π–∫–∞_–æ—Ç–º–µ–Ω–∞_–¥–∞')
                    but_no = types.InlineKeyboardButton(text='–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data='–°—Ç—Ä–æ–π–∫–∞_–æ—Ç–º–µ–Ω–∞_–Ω–µ—Ç')
                    key.add(but_no, but_yes)
                    await bot.send_message(message.chat.id,
                                           text=f'{await username(message)}, –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å —Å—Ç—Ä–æ–π–∫—É?\n'
                                                f'‚ùóÔ∏è –í–∞–º –±—É–¥—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ª–∏—à—å 50% —Ä–µ—Å—É—Ä—Å–æ–≤, –∞ —Ç–∞–∫–∂–µ –∑–∞—Ä–ø–ª–∞—Ç–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –±—É–¥–µ—Ç –æ–ø–ª–∞—á–µ–Ω–∞ –Ω–∞ 50%',
                                           reply_markup=key, parse_mode='Markdown')
                else:
                    await message.answer(f'{await username(message)}, –≤–æ –≤—Ä–µ–º—è —Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë!',
                                         parse_mode='Markdown')
        except:
            await message.answer(f'{await username(message)}, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å—Ç—Ä–æ–µ–∫!', parse_mode='Markdown')
    else:
        await message.answer(f'{await username(message)}, –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—é',
                             parse_mode='Markdown')


# /bpay –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—ã –∫–∞–∂–¥–æ–º—É —Å—Ç—Ä–æ–∏—Ç–µ–ª—é
async def bpay(message: types.Message):
    await check_user(message)
    pay = message.get_args().split()
    arr = next(os.walk(f'{os.getcwd()}/game/build_bus'))[2]
    for i in arr:
        build_data_json = str(i).replace('.json', '')
        if message.from_user.id == int(build_data_json):
            with open(f'{os.getcwd()}/game/build_bus/{i}', 'r', encoding='utf-8') as f:
                build_data = json.load(f)
                isbuilding = build_data['isbuilding']
                if len(pay) == 1 and isbuilding == False:
                    try:
                        user_info = database.users.find_one({'id': message.from_user.id})
                        pay = int(pay[0])
                        if user_info['cash'] < pay * build_data['need_builder']:
                            await message.answer(f'{await username(message)}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!',
                                                 parse_mode='Markdown')
                            return
                        if build_data['builder_pay'] == 0:
                            with open(f'./game/build_bus/{i}', 'w', encoding='utf-8') as f:
                                build_data['builder_pay'] = pay
                                json.dump(build_data, f)
                                await message.answer(
                                    f'{await username(message)}, –∫–∞–∂–¥—ã–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–æ–ª—É—á–∏—Ç {pay}$\n'
                                    f'‚ùóÔ∏è–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å—Ç—Ä–æ–π–∫—É (–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π - /build)\n'
                                    f'‚ùóÔ∏è–ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–±–µ—Ä–µ—Ç—Å—è {build_data["need_builder"]} —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π, –Ω–∞–ø–∏—à–∏—Ç–µ /build_bus',
                                    parse_mode='Markdown')
                                # –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –±–æ—Å—Å–∞ –æ —Ç–æ–º —á—Ç–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª–∏ –µ—Å—Ç—å, —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–π–∫–∏
                        else:
                            await message.answer(
                                f'{await username(message)}, —Ü–µ–Ω—É –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑',
                                parse_mode='Markdown')
                    except:
                        await message.answer(f'{await username(message)}, –ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: /bpay 100',
                                             parse_mode='Markdown')


# /buybus –ü–æ–∫—É–ø–∫–∞ –±–∏–∑–Ω–µ—Å–∞
async def buybus(message: types.Message):
    await check_user(message)
    user_info = database.users.find_one({'id': message.from_user.id})
    if database.users_bus.find_one({'boss': message.from_user.id}) is not None:
        await bot.send_message(message.chat.id, f'{await username(message)}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±–∏–∑–Ω–µ—Å!')
        return
    if user_info['citizen_country'] != '–Ω–µ—Ç':
        key = InlineKeyboardMarkup(row_width=3)
        but_nazad = InlineKeyboardButton('‚óÄÔ∏è', callback_data=f'buybus_naz_{str(message.from_user.id)[-3::]}_0')
        but_vpered = InlineKeyboardButton('‚ñ∂Ô∏è', callback_data=f'buybus_vper_{str(message.from_user.id)[-3::]}_0')
        but_buy = InlineKeyboardButton('–ö—É–ø–∏—Ç—å üí≤', callback_data=f'buybus_buy_{str(message.from_user.id)[-3::]}_0')
        but_otmena = InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data=f'buybus_otm_{str(message.from_user.id)[-3::]}_0')
        key.add(but_nazad, but_buy, but_vpered, but_otmena)
        bus_data = list(database.businesses.find({'country': user_info['citizen_country']}))
        await bot.send_message(message.chat.id, f'–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {bus_data[0]["country"]}\n'
                                                f'–ß—Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: {bus_data[0]["product"]}\n'
                                                f'üñ§ –¢–æ–ø–ª–∏–≤–∞: {bus_data[0]["oil"]} –ª\n'
                                                f'üçî –ï–¥–∞: {bus_data[0]["food"]} –∫–≥\n'
                                                f'üíµ –¶–µ–Ω–∞: {bus_data[0]["cost"]} $\n\n'
                                                f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{len(bus_data)}', reply_markup=key)
    else:
        await bot.send_message(message.chat.id,
                               f'{await username(message)}, –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ —Å—Ç–∞—Ç—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º —Å—Ç—Ä–∞–Ω—ã!')


async def end_build_bus(user_id):
    user_info = database.users.find_one({'id': user_id})
    builders_info = list(database.builders_work.find({'boss': user_id}))
    bus_info = database.users_bus.find_one({'boss': user_id})
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–æ–π–∫–∏
    database.users_bus.update_one({'boss': user_id}, {'$set': {'status': 'work'}})
    # –í—ã–¥–∞—á–∞ –¥–µ–Ω–µ–≥ —Å—Ç—Ä–æ–∏—Ç–µ–ª—è–º\—Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ö
    for builder in builders_info:
        ...
    await bot.send_message(user_id,
                           f'{await username_2(user_id, user_info["firstname"])}, –≤–∞—à –±–∏–∑–Ω–µ—Å {bus_info["name"]} {bus_info["product"]} –∑–∞–≤–µ—Ä—à–∏–ª —Å—Ç—Ä–æ–π–∫—É!')


def register_handlers_predprinimatel(dp: Dispatcher):
    dp.register_message_handler(mybus, commands='mybus')
    dp.register_message_handler(sell_bus, commands='sell_bus')
    dp.register_message_handler(cancel_bus, commands='cancel_bus')
    dp.register_message_handler(build_bus, commands='build_bus')
    dp.register_message_handler(bpay, commands='bpay')
    dp.register_message_handler(buybus, commands='buybus')
