import os

from bot import check_user, database, types, username_2, parser, bot, Dispatcher
import json
import pytz
import datetime
import asyncio
from bot import username

# /mybus –ú–æ–π –±–∏–∑–Ω–µ—Å
async def mybus(message: types.Message):
    # –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –∫—É–ø–∏–ª —Å—Ç—Ä–∞–Ω—É —Å—Ä–∞–∑—É –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω
    await check_user(message)
    bus_data = database.users_bus.find_one({'id': message.from_user.id})
    if bus_data is None:
        await message.answer(f'{await username(message)}, —É –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞!', parse_mode='Markdown')
    else:
        with open(f'./game/bus_workplace/{message.from_user.id}.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            work_people = data['users_id']
        await message.answer(f'{await username(message)}, –≤–∞—à –±–∏–∑–Ω–µ—Å:\n'
                             f'‚Ñ¢Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {bus_data["name"]}\n'
                             f'üõ† –ß—Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: {bus_data["product"]}\n'
                             f'üë®‚Äçüè´ –ê–≤—Ç–æ—Å–±–æ—Ä—â–∏–∫–æ–≤: {len(work_people)} –∏–∑ {bus_data["work_place"]} —á–µ–ª.\n'
                             f'üïê –í—Ä–µ–º—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ 1 –µ–¥–∏–Ω–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ü–∏–∏: {bus_data["time_to_create"]} –º–∏–Ω—É—Ç\n\n'
                             f'‚ùóÔ∏è –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –±–∏–∑–Ω–µ—Å–∞ –≤–≤–µ–¥–∏—Ç–µ /sell_bus', parse_mode='Markdown')


# /sell_bus –ü—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å
async def sell_bus(message: types.Message):
    await check_user(message)
    user_info = database.users.find_one({'id': message.from_user.id})
    if user_info['job'] == '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å':
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –±–∏–∑–Ω–µ—Å —É–∂–µ
        bus_info = database.users_bus.find_one({'id': message.from_user.id})
        if bus_info is not None:
            key = types.InlineKeyboardMarkup()
            but_yes = types.InlineKeyboardButton(text='–ü—Ä–æ–¥–∞—Ç—å', callback_data='–ë–∏–∑–Ω–µ—Å_–ø—Ä–æ–¥–∞—Ç—å')
            but_no = types.InlineKeyboardButton(text='–ù–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å', callback_data='–ë–∏–∑–Ω–µ—Å_–Ω–µ_–ø—Ä–æ–¥–∞—Ç—å')
            key.add(but_no, but_yes)
            await message.answer(
                f'{await username(message)}, –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å –∑–∞ {int(int(bus_info["cost"]) - int(bus_info["cost"]) * 0.1)}$',
                reply_markup=key, parse_mode='Markdown')
            # –∑–∞–ø–∏—Å—å –¥–∂—Å–æ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ü–µ–Ω–∞
            data = {}
            data['cost'] = int(int(bus_info["cost"]) - int(bus_info["cost"]) * 0.1)
            with open(f'{os.getcwd()}/game/sell_bus/{message.from_user.id}.json', 'w', encoding='utf-8') as f:
                json.dump(data, f)
        else:
            await message.answer(f'{await username(message)}, —É –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞!', parse_mode='Markdown')




# /build_bus –°—Ç—Ä–æ–∏—Ç—å –±–∏–∑–Ω–µ—Å
async def build_bus(message: types.Message):
    await check_user(message)
    user_info = database.users.find_one({'id': message.from_user.id})
    if user_info['job'] == '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å':
        try:
            with open(f'{os.getcwd()}/game/build_bus/{message.from_user.id}.json', 'r', encoding='utf-8') as f:
                build_data = json.load(f)
                isbuilding = build_data['isbuilding']
                f.close()
                if not isbuilding:
                    builders = build_data['builders']
                    if len(builders) == build_data['need_builder'] and not build_data['isbuilding']:
                        name = build_data['name']
                        product = build_data['product']
                        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                        tz = pytz.timezone('Etc/GMT-3')
                        now_time = tz.localize(datetime.datetime.now())
                        build_data['start_time'] = str(now_time)
                        build_data['isbuilding'] = True
                        cash = build_data['builder_pay']
                        with open(f'{os.getcwd()}/game/build_bus/{message.from_user.id}.json', 'w',
                                  encoding='utf-8') as f:
                            json.dump(build_data, f)

                        data = [f"{await username_2(message.from_user.id,message.from_user.username)} –Ω–∞—á–∞–ª —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–∞:\n"
                                f"üè¢ {name} {product}\nüë∑‚Äç‚ôÇÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª–∏:\n"]
                        for user_id in builders:
                            us_info = database.users.find_one({'id': user_id})
                            data.append(f'{await username_2(us_info["id"], us_info["username"])},')
                        data.append(
                            f'\n\n‚ùóÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–∞ –¥–ª–∏—Ç—å—Å—è 24 —á–∞—Å–∞, –ø–æ—Å–ª–µ –Ω–µ–≥–æ –≤—Å–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç {cash}$')
                        await message.answer(''.join(data))
                        await asyncio.sleep(120)
                        data.clear()

                        data.append(f'@{message.from_user.username}, —Å—Ç—Ä–æ—Ç–µ–ª—å—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! üß±\n'
                                    f'–°—Ç—Ä–æ–∏—Ç–µ–ª—è–º –≤—ã–¥–∞–Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ +{cash}$ üí∞\n')
                        for user_id in builders:
                            builder_info = database.users.find_one({'id': user_id})
                            boss_info = database.users.find_one({'id': message.from_user.id})
                            database.users.update_one({'id': user_id}, {'$set': {'cash': builder_info['cash'] + cash}})
                            database.users.update_one({'id': message.from_user.id},
                                                      {'$set': {'cash': boss_info['cash'] - cash}})
                            database.builders_work.delete_one({'builder': user_id})

                            data.append(f'{await username_2(builder_info["id"], builder_info["username"])},')
                        data.append(f'\n‚ùóÔ∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –≤–≤–µ–¥–∏—Ç–µ /mybus')
                        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                        database.users_bus.insert_one({'id': message.from_user.id,
                                                       'name': build_data['name'],
                                                       'prouct': build_data['product'],
                                                       'work_place': build_data['work_place'],
                                                       'time_to_create': build_data['time_to_create'],
                                                       'country': build_data['country']})
                        # —Å–æ–∑–¥–∞–Ω–∏–µ json —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–∏
                        with open(f'./game/bus_workplace/{message.from_user.id}.json', 'w', encoding='utf-8') as f:
                            data = {'users_id': [],
                                    'time_to_create': build_data['time_to_create']}
                            json.dump(data, f)

                        # —É–¥–∞–ª–µ–Ω–∏–µ json build_bus
                        path = os.getcwd()
                        os.remove(path + f'\\game\\build_bus\\{message.from_user.id}.json')
                        await message.answer(''.join(data), parse_mode='Markdown')
                    else:
                        await message.answer(
                            f'{await username_2(message.from_user.id, message.from_user.username)}, –≤–∞–º –Ω—É–∂–Ω–æ –µ—â–µ {build_data["need_builder"] - len(builders)} —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π', parse_mode='Markdown')
                else:
                    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                    tz = pytz.timezone('Etc/GMT-3')
                    now_time = tz.localize(datetime.datetime.now())

                    start_time = build_data['start_time']
                    start_time = parser.parse(str(start_time))

                    timeleft = now_time - start_time
                    timeleft = str(timeleft).split('.')
                    timeleft = str(timeleft[0]).split(':')
                    try:
                        int(timeleft[0])
                        hour24 = datetime.timedelta(hours=24, minutes=0, seconds=0)
                        timeleft = datetime.timedelta(hours=int(timeleft[0]), minutes=int(timeleft[1]),
                                                      seconds=int(timeleft[2]))
                        timeleft = hour24 - timeleft
                        await message.answer(
                            f'{await username_2(message.from_user.id, message.from_user.username)}, –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å {timeleft}', parse_mode='Markdown')
                    except:
                        cash = build_data['builder_pay']
                        builders = build_data['builders']
                        data = [
                            f'{username_2(message.from_user.id, message.from_user.username)}, —Å—Ç—Ä–æ—Ç–µ–ª—å—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n'
                            f'–°—Ç—Ä–æ–∏—Ç–µ–ª—è–º –≤—ã–¥–∞–Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ +{cash}$\n']
                        for user_id in builders:
                            builder_info = database.users.find_one({'id': user_id})
                            boss_info = database.users.find_one({'id': message.from_user.id})
                            database.users.update_one({'id': user_id}, {'$set': {'cash': builder_info['cash'] + cash}})
                            database.users.update_one({'id': message.from_user.id},
                                                      {'$set': {'cash': boss_info['cash'] - cash}})
                            database.builders_work.delete_one({'builder': user_id})

                            data.append(f'{await username_2(builder_info["id"], builder_info["username"])},')

                        data.append(f'\n‚ùóÔ∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –≤–≤–µ–¥–∏—Ç–µ /mybus')
                        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                        database.users_bus.insert_one({'id': message.from_user.id,
                                                       'name': build_data['name'],
                                                       'prouct': build_data['product'],
                                                       'work_place': build_data['work_place'],
                                                       'time_to_create': build_data['time_to_create'],
                                                       'country': build_data['country']})

                        # —Å–æ–∑–¥–∞–Ω–∏–µ json —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–∏
                        with open(f'{os.getcwd()}/game/bus_workplace/{message.from_user.id}.json', 'w', encoding='utf-8') as f:
                            data_dict = {}
                            data_dict['users_id'] = []
                            json.dump(data_dict, f)
                        # —É–¥–∞–ª–µ–Ω–∏–µ json build_bus
                        path = os.getcwd()
                        os.remove(path + f'\\game\\build_bus\\{message.from_user.id}.json')

                        await message.answer(''.join(data), parse_mode='Markdown')
        except:
            path = os.getcwd()
            os.remove(path + f'\\game\\build_bus\\{message.from_user.id}.json')
            await message.answer(f'{await username_2(message.from_user.id, message.from_user.username)}, —É –≤–∞—Å –Ω–µ—Ç —Å—Ç—Ä–æ–µ–∫', parse_mode='Markdown')
    else:
        await message.answer(f'{await username_2(message.from_user.id, message.from_user.username)}, –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—é', parse_mode='Markdown')


# /cancel_bus –û—Ç–º–µ–Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
async def cancel_bus(message):
    await check_user(message)
    user_info = database.users.find_one({'id': message.from_user.id})
    if user_info['job'] == '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å':
        try:
            path = os.getcwd()
            with open(f'{path}/game/build_bus/{message.from_user.id}.json', 'r', encoding='utf-8') as f:
                build_data = json.load(f)
                isbuilding = build_data['isbuilding']
                f.close()
                if not isbuilding:
                    # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ –±–∏–∑–Ω–µ—Å–µ
                    data = {'oil': build_data['oil'],
                            'food': build_data['food'],
                            'cost': build_data['cost'],
                            'builders': build_data['builders'],
                            'builder_pay': build_data['builder_pay']}
                    path = os.getcwd()
                    with open(f'{path}/game/cancel_bus/{message.from_user.id}.json', 'w', encoding='utf-8') as f:
                        json.dump(data, f)
                        f.close()
                    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    key = types.InlineKeyboardMarkup()
                    but_yes = types.InlineKeyboardButton(text='–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è', callback_data='–°—Ç—Ä–æ–π–∫–∞_–æ—Ç–º–µ–Ω–∞_–¥–∞')
                    but_no = types.InlineKeyboardButton(text='–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data='–°—Ç—Ä–æ–π–∫–∞_–æ—Ç–º–µ–Ω–∞_–Ω–µ—Ç')
                    key.add(but_no, but_yes)
                    await bot.send_message(message.chat.id,
                                           text=f'{await username(message)}, –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å —Å—Ç—Ä–æ–π–∫—É?\n'
                                                f'‚ùóÔ∏è –í–∞–º –±—É–¥—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ª–∏—à—å 50% —Ä–µ—Å—É—Ä—Å–æ–≤, –∞ —Ç–∞–∫–∂–µ –∑–∞—Ä–ø–ª–∞—Ç–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –±—É–¥–µ—Ç –æ–ø–ª–∞—á–µ–Ω–∞ –Ω–∞ 50%',
                                           reply_markup=key, parse_mode='Markdown')
                else:
                    await message.answer(f'{await username(message)}, –≤–æ –≤—Ä–µ–º—è —Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë!', parse_mode='Markdown')
        except:
            await message.answer(f'{await username(message)}, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å—Ç—Ä–æ–µ–∫!', parse_mode='Markdown')
    else:
        await message.answer(f'{await username(message)}, –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—é', parse_mode='Markdown')


# /bpay –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—ã –∫–∞–∂–¥–æ–º—É —Å—Ç—Ä–æ–∏—Ç–µ–ª—é
async def bpay(message: types.Message):
    await check_user(message)
    pay = message.get_args().split()
    arr = next(os.walk(f'{os.getcwd()}/game/build_bus'))[2]
    for i in arr:
        build_data_json = str(i).replace('.json', '')
        if message.from_user.id == int(build_data_json):
            with open(f'{os.getcwd()}/game/build_bus/{i}', 'r', encoding='utf-8') as f:
                build_data = json.load(f)
                isbuilding = build_data['isbuilding']
                if len(pay) == 1 and isbuilding == False:
                    try:
                        user_info = database.users.find_one({'id': message.from_user.id})
                        pay = int(pay[0])
                        if user_info['cash'] < pay * build_data['need_builder']:
                            await message.answer(f'{await username(message)}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!', parse_mode='Markdown')
                            return
                        if build_data['builder_pay'] == 0:
                            with open(f'./game/build_bus/{i}', 'w', encoding='utf-8') as f:
                                build_data['builder_pay'] = pay
                                json.dump(build_data, f)
                                await message.answer(
                                    f'{await username(message)}, –∫–∞–∂–¥—ã–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–æ–ª—É—á–∏—Ç {pay}$\n'
                                    f'‚ùóÔ∏è–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å—Ç—Ä–æ–π–∫—É (–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π - /build)\n'
                                    f'‚ùóÔ∏è–ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–±–µ—Ä–µ—Ç—Å—è {build_data["need_builder"]} —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π, –Ω–∞–ø–∏—à–∏—Ç–µ /build_bus', parse_mode='Markdown')
                                # –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –±–æ—Å—Å–∞ –æ —Ç–æ–º —á—Ç–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª–∏ –µ—Å—Ç—å, —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–π–∫–∏
                        else:
                            await message.answer(
                                f'{await username(message)}, —Ü–µ–Ω—É –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑', parse_mode='Markdown')
                    except:
                        await message.answer(f'{await username(message)}, –ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: /bpay 100', parse_mode='Markdown')


# /buybus –ü–æ–∫—É–ø–∫–∞ –±–∏–∑–Ω–µ—Å–∞
async def buybus(message: types.Message):
    await check_user(message)
    num_business = message.get_args().split()
    user_info = database.users.find_one({'id': message.from_user.id})
    if user_info["citizen_country"] != '–Ω–µ—Ç':  # –ï—Å–ª–∏ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω —Å—Ç—Ä–∞–Ω—ã
        if len(num_business) == 0:  # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç
            bus_data = list(database.businesses.find({'country': user_info['citizen_country']}))
            bus_list = [f'üíé –í –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –±–∏–∑–Ω–µ—Å—ã:\n']
            for i in range(0, len(bus_data)):
                bus_list.append(f'{i + 1}. {bus_data[i]["name"]} ({bus_data[i]["product"]})\n')
            bus_list.append(
                f'\n‚ùóÔ∏è –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å –≤–≤–µ–¥–∏—Ç–µ /buybus 1 (–≥–¥–µ 1 - –ø–æ–∑–∏—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ)')
            await message.answer(''.join(bus_list))
        elif len(num_business) == 1:
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –±–∏–∑–Ω–µ—Å —É–∂–µ
            user_bus = database.users_bus.find_one({'id': message.from_user.id})
            if user_bus is not None:
                await message.answer(f'{await username(message)}, –≤—ã —É–∂–µ –æ–±–ª–∞–¥–∞–µ—Ç–µ –±–∏–∑–Ω–µ—Å–æ–º!\n'
                                     f'üíé {user_bus["name"]} {user_bus["product"]} üíé\n'
                                     f'‚ùóÔ∏è –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –±–∏–∑–Ω–µ—Å–∞ –≤–≤–µ–¥–∏—Ç–µ /sell_bus', parse_mode='Markdown')
                return
            try:
                num_business = int(num_business[0])
                bus_data = list(database.businesses.find({'country': user_info['citizen_country']}))
                if user_info['job'] == '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å':
                    if user_info['oil'] >= bus_data[num_business - 1]['oil']:
                        if user_info['food'] >= bus_data[num_business - 1]['food']:
                            if user_info['cash'] >= bus_data[num_business - 1]['cost']:
                                try:
                                    with open(f'{os.getcwd()}/game/build_bus/{message.from_user.id}.json', 'r',
                                              encoding='utf-8') as f:
                                        build_data = json.load(f)
                                        isbuilding = '—Å—Ç—Ä–æ–∏—Ç—Å—è' if build_data['isbuilding'] == True else '–æ–∂–∏–¥–∞–Ω–∏–µ'
                                        await message.answer(
                                            f'{await username(message)}, —É –≤–∞—Å –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–π–∫–∞ üß±\n'
                                            f'‚Ñ¢Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {build_data["name"]}\n'
                                            f'üõ† –ß—Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: {build_data["product"]}\n'
                                            f'üë∑‚Äç‚ôÇÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π: {len(build_data["builders"])} –∏–∑ {build_data["need_builder"]}\n'
                                            f'‚öôÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–æ–π–∫–∏: {isbuilding}', parse_mode='Markdown')

                                except:
                                    with open(f'{os.getcwd()}/game/build_bus/{message.from_user.id}.json', 'w',
                                              encoding='utf-8') as f:
                                        build_data = {}
                                        build_data['country'] = bus_data[num_business - 1]['country']
                                        build_data['name'] = bus_data[num_business - 1]['name']
                                        build_data['product'] = bus_data[num_business - 1]['product']
                                        build_data['need_builder'] = bus_data[num_business - 1]['need_builder']
                                        build_data['oil'] = bus_data[num_business - 1]['oil']
                                        build_data['food'] = bus_data[num_business - 1]['food']
                                        build_data['cost'] = bus_data[num_business - 1]['cost']
                                        build_data['work_place'] = bus_data[num_business - 1]['work_place']
                                        build_data['time_to_create'] = bus_data[num_business - 1]['time_to_create']
                                        build_data['builders'] = []
                                        build_data['builder_pay'] = 0
                                        build_data['isbuilding'] = False
                                        json.dump(build_data, f)
                                        # –°–Ω—è—Ç–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤
                                        database.users.update_one({'id': message.from_user.id}, {'$set': {'oil': user_info['oil'] - bus_data[num_business - 1]['oil'],
                                                                                                          'food': user_info['food'] - bus_data[num_business - 1]['food'],
                                                                                                          'cash': user_info['cash'] - bus_data[num_business - 1]['cost']}})
                                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ —Å—á–µ—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞
                                        country_info = database.countries.find_one({'country': user_info['citizen_country']})
                                        database.countries.update_one({'country': user_info['country_citizen']}, {'$set': {'oil': country_info['oil'] + bus_data[num_business - 1]['oil'],
                                                                                                          'food': country_info['food'] + bus_data[num_business - 1]['food'],
                                                                                                          'cash': country_info['cash'] + bus_data[num_business - 1]['cost']}})
                                        # –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Å–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥ –∏ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏
                                        await message.answer(
                                            f'{await username(message)}, –≤–∞–º –±—ã–ª –≤–µ–¥–µ–ª–µ–Ω —É—á–∞—Å—Ç–æ–∫ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞, –∞ —Ç–∞–∫–∂–µ —Å–Ω—è—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã ‚öôÔ∏è\n\n'
                                            f'‚ùóÔ∏è –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞—Ç—É –∑–∞ —Ä–∞–±–æ—Ç—É –∫–∞–∂–¥–æ–º—É —Å—Ç—Ä–æ–∏—Ç–µ–ª—é (/bpay 10 - –≥–¥–µ 10 —Ü–µ–Ω–∞ –≤ $ –∫–∞–∂–¥–æ–º—É —Å—Ç—Ä–æ–∏—Ç–µ–ª—é –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É)\n', parse_mode='Markdown')

                            else:
                                await message.answer(f'{await username(message)}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ $', parse_mode='Markdown')
                        else:
                            await message.answer(f'{await username(message)}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ–¥—ã üçî', parse_mode='Markdown')
                    else:
                        await message.answer(f'{await username(message)}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–µ—Ñ—Ç–∏ üñ§', parse_mode='Markdown')
                else:
                    await message.answer(f'{await username(message)}, –≤—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–º', parse_mode='Markdown')

            except:
                print('predprinimatel 340')
    else:
        await message.answer(
            f'{await username(message)}, –≤—ã –¥–æ–ª–∂–Ω—ã —è–≤–ª—è—Ç—å—Å—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º –æ–¥–Ω–æ–π –∏–∑ —Å—Ç—Ä–∞–Ω! (/citizen)')


# /bus –í—Å–µ –±–∏–∑–Ω–µ—Å—ã
async def bus(message):
    await check_user(message)
    num_business = message.get_args().split()
    if len(num_business) == 0:
        business_data = list(database.businesses.find())
        cars_list = ['üíé –ë–∏–∑–Ω–µ—Å—ã –≤ –º–∏—Ä–µ:\n']
        for i in range(0, len(business_data)):
            cars_list.append(f'{i + 1}. {business_data[i]["country"]} {business_data[i]["name"]} ({business_data[i]["product"]})\n')
        cars_list.append(
            f'\n‚ùóÔ∏è –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–∏–∑–Ω–µ—Å–µ –≤–≤–µ–¥–∏—Ç–µ /bus 1 (–≥–¥–µ 1 - –ø–æ–∑–∏—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ)\n'
            f'üí∞ –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å –≤–≤–µ–¥–∏—Ç–µ /buybus')
        await message.answer(''.join(cars_list))
    elif len(num_business) == 1:
        try:
            num_business = int(num_business[0])
            business_data = list(database.businesses.find())
            await message.answer(f'üíé –û –±–∏–∑–Ω–µ—Å–µ:\n'
                                 f'üåê –°—Ç—Ä–∞–Ω–∞: {business_data[num_business - 1]["country"]}\n'
                                 f'‚Ñ¢Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {business_data[num_business - 1]["name"]}\n'
                                 f'üõ† –ß—Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: {business_data[num_business - 1]["product"]}\n'
                                 f'üë∑‚Äç‚ôÇÔ∏è –ù—É–∂–Ω–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –¥–ª—è —Å—Ç—Ä–æ–π–∫–∏: {business_data[num_business - 1]["need_builder"]}\n'
                                 f'üñ§ –ù—É–∂–Ω–æ –Ω–µ—Ñ—Ç–∏: {business_data[num_business - 1]["oil"]}–ª\n'
                                 f'üçî –ù—É–∂–Ω–æ –µ–¥—ã: {business_data[num_business - 1]["food"]}–∫–≥\n'
                                 f'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {business_data[num_business - 1]["cost"]}$\n'
                                 f'üë®‚Äçüë®‚Äçüë¶Ô∏è –†–∞–±–æ—á–∏—Ö –º–µ—Å—Ç: {business_data[num_business - 1]["work_place"]}\n'
                                 f'üïê –í—Ä–µ–º—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ 1 –µ–¥. –ø—Ä–æ–¥—É–∫—Ü–∏–∏: {business_data[num_business - 1]["time_to_create"]}–º–∏–Ω')
        except:
            print('predprinimatel 374')


def register_handlers_predprinimatel(dp: Dispatcher):
    dp.register_message_handler(mybus, commands='mybus')
    dp.register_message_handler(sell_bus, commands='sell_bus')
    dp.register_message_handler(cancel_bus, commands='cancel_bus')
    dp.register_message_handler(build_bus, commands='build_bus')
    dp.register_message_handler(bpay, commands='bpay')
    dp.register_message_handler(buybus, commands='buybus')
    dp.register_message_handler(bus, commands='bus')
