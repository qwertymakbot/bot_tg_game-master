from bot import *


# /build –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –æ–∂–∏–¥–∞—é—â–∏—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π
async def build(message):
    await check_user(message)
    with sqlite3.connect('game/data.db', timeout=10) as conn:
        cur = conn.cursor()
        id_build = message.get_args().split()
        if len(id_build) == 0:  # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç
            job = cur.execute("""SELECT job FROM users WHERE user_id = ?""", (message.from_user.id,)).fetchone()
            if job[0] == '–°—Ç—Ä–æ–∏—Ç–µ–ª—å':
                arr = next(os.walk(f'./game/build_bus'))[2]
                if len(arr) != 0:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
                    data = []
                    data.append('üß± –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–æ–µ–∫:\n')
                    for i in arr:
                        with open(f'./game/build_bus/{i}', 'r', encoding='utf-8') as f:
                            build_data = json.load(f)
                            if build_data['isbuilding'] == False and len(build_data['builders']) < build_data[
                                'need_builder']:
                                data.append(f"‚ö†Ô∏è ID —Å—Ç—Ä–æ–π–∫–∏: {str(i).replace('.json', '')}\n")
                                data.append(f'üë∑‚Äç‚ôÇÔ∏è –ù—É–∂–Ω–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π: {build_data["need_builder"]}\n')
                                data.append(f'üí∞ –û–ø–ª–∞—Ç–∞ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é —Å—Ç—Ä–æ–π–∫–∏: {build_data["builder_pay"]}$\n')
                    data.append(f'\n‚ùóÔ∏è –ß—Ç–æ–±—ã —É—Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–∞ —Å—Ç—Ä–æ–π–∫—É, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /build 1 - –≥–¥–µ 1 —ç—Ç–æ ID —Å—Ç—Ä–æ–π–∫–∏')
                    await message.answer(''.join(data))
                else:
                    await message.answer('üß± –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç!')
            else:
                await message.answer(f'@{message.from_user.username}, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—è–º!')
        else:
            try:
                id_build = int(id_build[0])
                job = cur.execute("""SELECT job FROM users WHERE user_id = ?""", (message.from_user.id,)).fetchone()
                if job[0] == '–°—Ç—Ä–æ–∏—Ç–µ–ª—å':
                    try:
                        with open(f'./game/build_bus/{id_build}.json', 'r', encoding='utf-8') as f:
                            isWorking = cur.execute("""SELECT working FROM users WHERE user_id = ?""",
                                                    (message.from_user.id,)).fetchone()
                            if not isWorking[0]:  # –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                                build_data = json.load(f)
                                if not build_data['isbuilding'] and len(build_data['builders']) < build_data[
                                    'need_builder']:  # –°—Ç—Ä–æ–π–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—è—Ö
                                    builders = build_data['builders']  # –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π

                                    cur = conn.cursor()
                                    cur.execute("""CREATE TABLE IF NOT EXISTS builders_work(
                                                                    builder INT,
                                                                    boss INT)""")
                                    bilder = cur.execute("""SELECT boss FROM builders_work WHERE builder = ?""",
                                                         (message.from_user.id,)).fetchone()
                                    if bilder is None:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —Å—Ç—Ä–æ–π–∫–µ
                                        # –∑–∞–ø–∏—Å—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—è –∏ –∑–∞–∫–∞–∑—á–∏–∫–∞ –≤ –±–¥
                                        cur.execute("""INSERT INTO builders_work VALUES(?,?)""",
                                                    (message.from_user.id, id_build))
                                        conn.commit()
                                        # –∑–∞–ø–∏—Å—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ json
                                        builders.append(message.from_user.id)
                                        build_data['builders'] = builders
                                        with open(f'./game/build_bus/{id_build}.json', 'w', encoding='utf-8') as f:
                                            json.dump(build_data, f)
                                        boss = cur.execute("""SELECT username FROM users WHERE user_id = ?""",
                                                           (id_build,)).fetchone()
                                        await message.answer(
                                            f'@{message.from_user.username}, –≤—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç—Ä–æ–∏–ª–∏—Å—å –Ω–∞ –æ–±—ä–µ–∫—Ç –∫ @{boss[0]} üß±\n\n'
                                            f'‚ùóÔ∏è –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ –≤—Å–µ —Å–æ–±–µ—Ä—É—Ç—Å—è –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–∞—á–Ω–µ—Ç —Å—Ç—Ä–æ–π–∫—É, –≤–∞—à –≥–æ–Ω–æ—Ä–∞—Ä –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ {build_data["builder_pay"]}$')
                                    else:
                                        await message.answer(
                                            f'@{message.from_user.username}, –≤—ã —É–∂–µ —É—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–æ–π–∫–µ {bilder[0]}')
                                else:
                                    await message.answer(f'@{message.from_user.username}, —Å—Ç—Ä–æ–π–∫–∞ —É–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞')
                            else:
                                await message.answer(f'@{message.from_user.username}, –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–∫–æ–Ω—á–∏—Ç–µ —Ä–∞–±–æ—Ç—É!')

                    except:
                        await message.answer(f'@{message.from_user.username}, –¥–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
                else:
                    await message.answer(f'@{message.from_user.username}, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—è–º!')
            except:
                await message.answer(f'@{message.from_user.username}, –ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: /build 123123')
        cur.close()

# /leave_build –£–π—Ç–∏ —Å–æ —Å—Ç—Ä–æ–π–∫–∏
async def leave_build(message):
    await check_user(message)
    with sqlite3.connect('game/data.db', timeout=10) as conn:
        cur = conn.cursor()
        job = cur.execute("""SELECT job FROM users WHERE user_id = ?""", (message.from_user.id,)).fetchone()
        if job[0] == '–°—Ç—Ä–æ–∏—Ç–µ–ª—å':
            boss = cur.execute("""SELECT boss FROM builders_work WHERE builder = ?""", (message.from_user.id,)).fetchone()
            if boss is not None:
                with open(f'./game/build_bus/{boss[0]}.json', 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    if not data['isbuilding']:
                        with open(f'./game/build_bus/{boss[0]}.json', 'w', encoding='utf-8') as f:
                            data['builders'].remove(message.from_user.id)
                            json.dump(data, f)
                            cur.execute("""DELETE FROM builders_work WHERE builder = ?""", (message.from_user.id,))
                            conn.commit()
                            await message.answer(
                                f'@{message.from_user.username}, –≤—ã —É—à–ª–∏ —Å–æ —Å—Ç—Ä–æ–π–∫–∏!')
                    else:
                        await message.answer(
                            f'@{message.from_user.username}, –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è!')
            else:
                await message.answer(f'@{message.from_user.username}, –≤—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–∏ –Ω–∞ –∫–∞–∫–æ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ!')
        else:
            await message.answer(f'@{message.from_user.username}, –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—è–º!')
        cur.close()

def register_handlers_stroitel(dp: Dispatcher):
    dp.register_message_handler(build, commands='build')
    dp.register_message_handler(leave_build, commands='leave_build')