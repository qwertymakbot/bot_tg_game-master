import datetime
import json
import os
import re
from bot import check_user, scheduler, Dispatcher, bot, types, tag_user, InputFile, InlineKeyboardButton, \
    InlineKeyboardMarkup, database, res_database, username, add_time_min
import pytz
from dateutil import parser
import random
import asyncio


food_mak = 40
food_povar = 90
food_pekar = 70
food_fermer = 200


# /work –†–∞–±–æ—Ç–∞—Ç—å
async def work(message: types.Message):
    await check_user(message)
    user_id = message.from_user.id
    user_info = database.users.find_one({'id': user_id})
    res_job_info = res_database.job.find_one({'id': user_id})
    res_disease_info = res_database.disease.find_one({'id': user_id})
    if user_info["job"] != '–Ω–µ—Ç':  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞
        if res_job_info and res_job_info['working']:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å —Å—Ç—Ä–æ–∫–∏
            tz = pytz.timezone('Etc/GMT-3')
            date, time = res_job_info['time'].split(' ')
            year, month, day = date.split('-')
            hour, minute, second = time.split(':')
            time_job = datetime.datetime(int(year), int(month), int(day), int(hour), int(minute), int(second))
            time_now = datetime.datetime(datetime.datetime.now(tz=tz).year, datetime.datetime.now(tz=tz).month,
                                         datetime.datetime.now(tz=tz).day, datetime.datetime.now(tz=tz).hour,
                                         datetime.datetime.now(tz=tz).minute, datetime.datetime.now(tz=tz).second)
            result = time_job - time_now
            # –ï—Å–ª–∏ —É–∂–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª
            if '-' in str(result):
                res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})
                await work(message)
            else:
                await bot.send_message(message.chat.id, f'{await username(message)}, –≤—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ, –≤–∞–º –µ—â—ë –æ—Å—Ç–∞–ª–æ—Å—å {result}',
                                   parse_mode='HTML')
            return
        else:
            if res_disease_info is not None:  # –ï—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª–µ–∑–Ω—å
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å —Å—Ç—Ä–æ–∫–∏
                tz = pytz.timezone('Etc/GMT-3')
                date, time = res_disease_info['time'].split(' ')
                year, month, day = date.split('-')
                hour, minute, second = time.split(':')
                time_disease = datetime.datetime(int(year), int(month), int(day), int(hour), int(minute), int(second))
                time_now = datetime.datetime(datetime.datetime.now(tz=tz).year, datetime.datetime.now(tz=tz).month,
                                             datetime.datetime.now(tz=tz).day, datetime.datetime.now(tz=tz).hour,
                                             datetime.datetime.now(tz=tz).minute, datetime.datetime.now(tz=tz).second)
                result = time_disease - time_now
                # –ï—Å–ª–∏ —É–∂–µ –æ—Ç–±–æ–ª–µ–ª
                if '-' in str(result):
                    res_database.disease.delete_one({'id': user_id})
                    rand_num = random.randint(1, 10)
                    if rand_num == 1:  # –ï—Å–ª–∏ –∑–∞–±–æ–ª–µ–ª

                        all_diseases = database.diseases.find()
                        disease_info = random.choice(list(all_diseases))

                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–¥ –∏–Ω—Ñ—ã –æ –±–æ–ª–µ–∑–Ω–∏
                        res_database.disease.insert_one({'id': user_id,
                                                         'time': await add_time_min(disease_info['time']),
                                                         'disease': True})
                        tz = pytz.timezone('Etc/GMT-3')
                        scheduler.add_job(end_disease, "date",
                                          run_date=await add_time_min(disease_info['time']),
                                          args=(message,), id=str(user_id), timezone=tz)
                        await bot.send_message(message.chat.id,
                                               f'{await username(message)}, –≤—ã –∑–∞–±–æ–ª–µ–ª–∏ –±–æ–ª–µ–∑–Ω—å—é {disease_info["disease"].lower()} –Ω–∞ –≤—Ä–µ–º—è {disease_info["time"]} –º–∏–Ω—É—Ç ü¶†',
                                               parse_mode='HTML')
                    else:
                        if user_info['citizen_country'] != '–Ω–µ—Ç':  # –ï—Å–ª–∏ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω
                            job_info = database.jobs.find_one({'name_job': user_info['job']})
                            country_info = database.countries.find_one({'country': user_info['citizen_country']})
                            if country_info['food'] >= job_info['need_food']:  # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–∞–Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ–¥—ã
                                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å, —Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º
                                if user_info['job'] == '–°—Ç—Ä–æ–∏—Ç–µ–ª—å':
                                    builder_info = database.builders_work.find_one({'id': user_id})
                                    if builder_info is not None:
                                        await message.answer(
                                            f'{await username(message)}, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ª–∏–±–æ –ø–æ–∫–∏–Ω—å—Ç–µ —Å—Ç—Ä–æ–π–∫—É',
                                            reply_markup='HTML')
                                        return
                                # –°–Ω—è—Ç–∏–µ –µ–¥—ã —Å–æ —Å—Ç—Ä–∞–Ω—ã –∑–∞ —Ä–∞–±–æ—Ç—É
                                database.countries.update_one({'country': user_info['citizen_country']},
                                                              {'$set': {
                                                                  'food': country_info['food'] - job_info['need_food']}})
                                # –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—à–∏–Ω–∞
                                car_info = database.users_cars.find_one({'id': user_id})
                                arr = next(os.walk(f'{os.getcwd()}/res/jobs_pic/{user_info["job"]}'))[2]
                                if car_info is not None:
                                    need_oil = round(car_info['fuel_per_hour'] / (60 / job_info['job_time']))
                                    if car_info['oil'] >= need_oil:
                                        # –°–∂–∏–≥–∞–µ–º —Ç–æ–ø–ª–∏–≤–æ
                                        database.users_cars.update_one(
                                            {'$and': [{'user_id': user_id}, {'car': car_info['name_car']}]},
                                            {'$set': {'oil': car_info['oil'] - need_oil}})
                                        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É –µ–¥—è –Ω–∞ –º–∞—à–∏–Ω–µ
                                        job_time = int(job_info['job_time'] * (job_info['save_job_time'] / 100))
                                        await bot.send_photo(message.chat.id,
                                                             photo=InputFile(
                                                                 f'{os.getcwd()}/res/jobs_pic/{user_info["job"]}/{random.choice(arr)}'),
                                                             caption=f'{await username(message)}, –≤—ã –ø–æ–µ—Ö–∞–ª–∏ –Ω–∞ –º–∞—à–∏–Ω–µ –∏ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ {user_info["job"].lower()}\n'
                                                                     f'–ß–µ—Ä–µ–∑ {job_time} –º–∏–Ω—É—Ç –≤—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ!\n'
                                                                     f'–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏:\n'
                                                                     f'üñ§ -{need_oil}–ª', parse_mode='HTML')
                                        # SCHEDULER
                                        res_database.job.update_one({'id': user_id},
                                                                    {'$set': {
                                                                        'time': await add_time_min(job_info['job_time']),
                                                                        'working': True}})
                                        tz = pytz.timezone('Etc/GMT-3')
                                        scheduler.add_job(end_job_citizen, "date",
                                                          run_date=await add_time_min(job_time),
                                                          args=(message, user_info['job']), id=str(user_id), timezone=tz)
                                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–ø–ª–∏–≤–∞
                                    else:
                                        await bot.send_photo(message.chat.id,
                                                             photo=InputFile(
                                                                 f'{os.getcwd()}/res/jobs_pic/{user_info["job"]}/{random.choice(arr)}'),
                                                             caption=f'{await username(message)}, –≤ –≤–∞—à–µ–º {car_info["name_car"]} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–ø–ª–∏–≤–∞, –≤—ã –ø–æ—à–ª–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É –ø–µ—à–∫–æ–º –∏ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ {user_info["job"].lower()}\n'
                                                                     f'–ß–µ—Ä–µ–∑ {job_info["job_time"]} –º–∏–Ω—É—Ç –≤—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ!', parse_mode='HTML')
                                        # SCHEDULER
                                        res_database.job.update_one({'id': user_id},
                                                                    {'$set': {
                                                                        'time': await add_time_min(job_info['job_time']),
                                                                        'working': True}})

                                        tz = pytz.timezone('Etc/GMT-3')
                                        scheduler.add_job(end_job_citizen, "date",
                                                          run_date=await add_time_min(job_info['job_time']),
                                                          args=(message, user_info['job']), id=str(user_id), timezone=tz)
                                # –ï—Å–ª–∏ –Ω–µ—Ç –º–∞—à–∏–Ω—ã
                                else:
                                    await bot.send_photo(message.chat.id,
                                                         photo=InputFile(
                                                             f'{os.getcwd()}/res/jobs_pic/{user_info["job"]}/{random.choice(arr)}'),
                                                         caption=f'{await username(message)}, –≤—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ {user_info["job"].lower()}\n'
                                                                 f'–ß–µ—Ä–µ–∑ {job_info["job_time"]} –º–∏–Ω—É—Ç –≤—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ!', parse_mode='HTML')
                                    # SCHEDULER
                                    res_database.job.update_one({'id': user_id},
                                                                {'$set': {'time': await add_time_min(job_info['job_time']),
                                                                          'working': True}})

                                    tz = pytz.timezone('Etc/GMT-3')
                                    scheduler.add_job(end_job_citizen, "date",
                                                      run_date=await add_time_min(job_info['job_time']),
                                                      args=(message, user_info['job']), id=str(user_id), timezone=tz)
                        else:  # –ï—Å–ª–∏ –Ω–µ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω
                            job_info = database.jobs.find_one({'name_job': user_info['job']})
                            res_database.job.update_one({'id': user_id},
                                                        {'$set': {'time': await add_time_min(job_info['job_time']),
                                                                  'working': True}})
                            tz = pytz.timezone('Etc/GMT-3')
                            scheduler.add_job(end_job_no_citizen, "date", run_date=await add_time_min(job_info['job_time']),
                                              args=(message, user_info['job']), id=str(user_id), timezone=tz)
                            arr = next(os.walk(f'{os.getcwd()}/res/jobs_pic/{user_info["job"]}'))[2]
                            await bot.send_photo(message.chat.id,
                                                 photo=InputFile(
                                                     f'{os.getcwd()}/res/jobs_pic/{user_info["job"]}/{random.choice(arr)}'),
                                                 caption=f'{await username(message)}, –≤—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ {user_info["job"].lower()}\n'
                                                         f'–ß–µ—Ä–µ–∑ {job_info["job_time"]} –º–∏–Ω—É—Ç –≤—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ!', parse_mode='HTML')
                # –µ—Å–ª–∏ –µ—â–µ –±–æ–ª–µ–µ—à—å
                else:
                    await bot.send_message(message.chat.id, f'{await username(message)}, –≤–∞–º –µ—â—ë –æ—Å—Ç–∞–ª–æ—Å—å –±–æ–ª–µ—Ç—å {result} ü¶†', parse_mode='HTML')
            else:
                rand_num = random.randint(1, 10)
                if rand_num == 1:  # –ï—Å–ª–∏ –∑–∞–±–æ–ª–µ–ª

                    all_diseases = database.diseases.find()
                    disease_info = random.choice(list(all_diseases))

                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–¥ –∏–Ω—Ñ—ã –æ –±–æ–ª–µ–∑–Ω–∏
                    res_database.disease.insert_one({'id': user_id,
                                                     'time': await add_time_min(disease_info['time']),
                                                     'disease': True})
                    tz = pytz.timezone('Etc/GMT-3')
                    scheduler.add_job(end_disease, "date",
                                      run_date=await add_time_min(disease_info['time']),
                                      args=(message,), id=str(user_id), timezone=tz)
                    await bot.send_message(message.chat.id,
                                           f'{await username(message)}, –≤—ã –∑–∞–±–æ–ª–µ–ª–∏ –±–æ–ª–µ–∑–Ω—å—é {disease_info["disease"].lower()} –Ω–∞ –≤—Ä–µ–º—è {disease_info["time"]} –º–∏–Ω—É—Ç ü¶†',
                                           parse_mode='HTML')
                else:
                    if user_info['citizen_country'] != '–Ω–µ—Ç':  # –ï—Å–ª–∏ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω
                        job_info = database.jobs.find_one({'name_job': user_info['job']})
                        country_info = database.countries.find_one({'country': user_info['citizen_country']})
                        if country_info['food'] >= job_info['need_food']:  # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–∞–Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ–¥—ã
                            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å, —Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º
                            if user_info['job'] == '–°—Ç—Ä–æ–∏—Ç–µ–ª—å':
                                builder_info = database.builders_work.find_one({'id': user_id})
                                if builder_info is not None:
                                    await message.answer(
                                        f'{await username(message)}, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ª–∏–±–æ –ø–æ–∫–∏–Ω—å—Ç–µ —Å—Ç—Ä–æ–π–∫—É',
                                        parse_mode='HTML')
                                    return
                            # –°–Ω—è—Ç–∏–µ –µ–¥—ã —Å–æ —Å—Ç—Ä–∞–Ω—ã –∑–∞ —Ä–∞–±–æ—Ç—É
                            database.countries.update_one({'country': user_info['citizen_country']},
                                                          {'$set': {'food': country_info['food'] - job_info['need_food']}})
                            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—à–∏–Ω–∞
                            car_info = database.users_car.find_one({'id': user_id})
                            arr = next(os.walk(f'{os.getcwd()}/res/jobs_pic/{user_info["job"]}'))[2]
                            if car_info is not None:
                                need_oil = round(car_info['fuel_per_hour'] / (60 / job_info['job_time']))
                                if car_info['oil'] >= need_oil:
                                    # –°–∂–∏–≥–∞–µ–º —Ç–æ–ø–ª–∏–≤–æ
                                    database.users_cars.update_one(
                                        {'$and': [{'user_id': user_id}, {'car': car_info['name_car']}]},
                                        {'$set': {'oil': car_info['oil'] - need_oil}})
                                    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É –µ–¥—è –Ω–∞ –º–∞—à–∏–Ω–µ
                                    job_time = int(job_info['job_time'] * (job_info['save_job_time'] / 100))
                                    await bot.send_photo(message.chat.id,
                                                         photo=InputFile(
                                                             f'{os.getcwd()}/res/jobs_pic/{user_info["job"]}/{random.choice(arr)}'),
                                                         caption=f'{await username(message)}, –≤—ã –ø–æ–µ—Ö–∞–ª–∏ –Ω–∞ –º–∞—à–∏–Ω–µ –∏ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ {user_info["job"].lower()}\n'
                                                                 f'–ß–µ—Ä–µ–∑ {job_time} –º–∏–Ω—É—Ç –≤—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ!\n'
                                                                 f'–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏:\n'
                                                                 f'üñ§ -{need_oil}–ª', parse_mode='HTML')
                                    # SCHEDULER
                                    res_database.job.update_one({'id': user_id},
                                                                {'$set': {'time': await add_time_min(job_info['job_time']),
                                                                          'working': True}})
                                    tz = pytz.timezone('Etc/GMT-3')
                                    scheduler.add_job(end_job_citizen, "date",
                                                      run_date=await add_time_min(job_time),
                                                      args=(message, user_info['job']), id=str(user_id), timezone=tz)
                                # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–ø–ª–∏–≤–∞
                                else:
                                    await bot.send_photo(message.chat.id,
                                                         photo=InputFile(
                                                             f'{os.getcwd()}/res/jobs_pic/{user_info["job"]}/{random.choice(arr)}'),
                                                         caption=f'{await username(message)}, –≤ –≤–∞—à–µ–º {car_info["name_car"]} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–ø–ª–∏–≤–∞, –≤—ã –ø–æ—à–ª–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É –ø–µ—à–∫–æ–º –∏ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ {user_info["job"].lower()}\n'
                                                                 f'–ß–µ—Ä–µ–∑ {job_info["job_time"]} –º–∏–Ω—É—Ç –≤—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ!', parse_mode='HTML')
                                    # SCHEDULER
                                    res_database.job.update_one({'id': user_id},
                                                                {'$set': {'time': await add_time_min(job_info['job_time']),
                                                                          'working': True}})

                                    tz = pytz.timezone('Etc/GMT-3')
                                    scheduler.add_job(end_job_citizen, "date",
                                                      run_date=await add_time_min(job_info['job_time']),
                                                      args=(message, user_info['job']), id=str(user_id), timezone=tz)
                            # –ï—Å–ª–∏ –Ω–µ—Ç –º–∞—à–∏–Ω—ã
                            else:
                                await bot.send_photo(message.chat.id,
                                                     photo=InputFile(
                                                         f'{os.getcwd()}/res/jobs_pic/{user_info["job"]}/{random.choice(arr)}'),
                                                     caption=f'{await username(message)}, –≤—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ {user_info["job"].lower()}\n'
                                                             f'–ß–µ—Ä–µ–∑ {job_info["job_time"]} –º–∏–Ω—É—Ç –≤—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ!', parse_mode='HTML')
                                # SCHEDULER
                                res_database.job.update_one({'id': user_id},
                                                            {'$set': {'time': await add_time_min(job_info['job_time']),
                                                                      'working': True}})

                                tz = pytz.timezone('Etc/GMT-3')
                                scheduler.add_job(end_job_citizen, "date",
                                                  run_date=await add_time_min(job_info['job_time']),
                                                  args=(message, user_info['job']), id=str(user_id), timezone=tz)
                    else:  # –ï—Å–ª–∏ –Ω–µ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω
                        job_info = database.jobs.find_one({'name_job': user_info['job']})
                        res_database.job.update_one({'id': user_id},
                                                    {'$set': {'time': await add_time_min(job_info['job_time']),
                                                              'working': True}})
                        tz = pytz.timezone('Etc/GMT-3')
                        scheduler.add_job(end_job_no_citizen, "date", run_date=await add_time_min(job_info['job_time']),
                                          args=(message, user_info['job']), id=str(user_id), timezone=tz)
                        arr = next(os.walk(f'{os.getcwd()}/res/jobs_pic/{user_info["job"]}'))[2]
                        await bot.send_photo(message.chat.id,
                                             photo=InputFile(
                                                 f'{os.getcwd()}/res/jobs_pic/{user_info["job"]}/{random.choice(arr)}'),
                                             caption=f'{await username(message)}, –≤—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ {user_info["job"].lower()}\n'
                                                     f'–ß–µ—Ä–µ–∑ {job_info["job_time"]} –º–∏–Ω—É—Ç –≤—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ!', parse_mode='HTML')
    else:
        await bot.send_message(message.chat.id,f'{await username(message)}, –≤—ã –Ω–∏–≥–¥–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ!', parse_mode='HTML')

# /jobs –£—Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É
async def getjob(message: types.Message):
    await check_user(message)
    educ_info = database.education.find_one({'id': message.from_user.id})
    if educ_info is not None:
        buttons = InlineKeyboardMarkup(1)
        jobs = re.split(r"\s+(?=[–ê-–Ø])", educ_info['jobs'])
        for job in jobs:
            buttons.add(InlineKeyboardButton(job, callback_data=f'getjob_{job}_{str(message.from_user.id)[-2::]}'))
        await bot.send_message(message.chat.id, text='‚ùóÔ∏è –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –±–æ–ª—å—à–µ –≤–≤–µ–¥–∏—Ç–µ /education\n'
                                                     'üõ† –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—Ç üõ†', reply_markup=buttons)
    else:
        buttons = InlineKeyboardMarkup(1)
        jobs = ['–†–∞–±', '–î–≤–æ—Ä–Ω–∏–∫', '–î–æ—è—Ä']
        for job in jobs:
            buttons.add(InlineKeyboardButton(job, callback_data=f'getjob_{job}_{str(message.from_user.id)[-2::]}'))
        await bot.send_message(message.chat.id, text='‚ùóÔ∏è –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –±–æ–ª—å—à–µ –≤–≤–µ–¥–∏—Ç–µ /education\n'
                                                     'üõ† –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—Ç üõ†', reply_markup=buttons)


# /leavejob –£–≤–æ–ª–∏—Ç—å—Å—è
async def leavejob(message):
    await check_user(message)
    user_id = message.from_user.id

    user_info = database.users.find_one({'id': user_id})
    res_info = res_database.job.find_one({'id': user_id})
    print(f'evol_{res_info}')
    # –ï—Å–ª–∏ –Ω–∏–≥–¥–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é
    if res_info is None:
        await message.answer(f'{await username(message)}, –≤—ã –Ω–∏–≥–¥–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ!', parse_mode='HTML')
        return
    # –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞—é, –Ω–æ –Ω–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
    if user_info['job'] != '–Ω–µ—Ç' and res_info['working'] == False:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –±–∏–∑–Ω–µ—Å, —Ç–æ –Ω–µ–ª—å–∑—è —É–≤–æ–ª–∏—Ç—å—Å—è
        if user_info['job'] == '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å':
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –±–∏–∑–Ω–µ—Å —É–∂–µ
            isBus = database.users_bus.find_one({'id': message.from_user.id})
            if isBus is not None:
                await message.answer(
                    f'{await username(message)}, –≤—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ –±–∏–∑–Ω–µ—Å–æ–º, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å!\n'
                    f'üíé {isBus["name"]} {isBus["product"]} üíé\n'
                    f'‚ùóÔ∏è –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –±–∏–∑–Ω–µ—Å–∞ –≤–≤–µ–¥–∏—Ç–µ /sell_bus',
                    parse_mode='HTML')
                return
        if user_info['job'] == '–°—Ç—Ä–æ–∏—Ç–µ–ª—å':
            boss = database.builders_work.find_one({'id': message.from_user.id})
            if boss is not None:
                await message.answer(f'{await username(message)}, –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ —É–π—Ç–∏ —Å–æ —Å—Ç—Ä–æ–π–∫–∏!\n'
                                     f'‚ùóÔ∏è –ß—Ç–æ–±—ã —É–π—Ç–∏ - /leave_build',
                                     parse_mode='HTML')
        if user_info['job'] == '–ê–≤—Ç–æ—Å–±–æ—Ä—â–∏–∫':
            boss = database.autocreater_work.find_one({'id': message.from_user.id})
            if boss is not None:
                await message.answer(f'{await username(message)}, –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ —É–π—Ç–∏ —Å –∞–≤—Ç–æ—Å–±–æ—Ä–∫–∏!\n'
                                     f'‚ùóÔ∏è –ß—Ç–æ–±—ã —É–π—Ç–∏ - /leave_creater',
                                     parse_mode='HTML')
        # –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
        database.users.update_one({'id': user_id}, {'$set': {'job': '–Ω–µ—Ç'}})
        res_database.job.delete_one({'id': user_id})
        await message.answer(f'{await username(message)}, –≤—ã —É–≤–æ–ª–∏–ª–∏—Å—å!',
                             parse_mode='HTML')
    elif user_info['job'] != '–Ω–µ—Ç' and res_info['working']:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å —Å—Ç—Ä–æ–∫–∏
        tz = pytz.timezone('Etc/GMT-3')
        res_job_info = res_database.job.find_one({'id': user_id})
        date, time = res_job_info['time'].split(' ')
        year, month, day = date.split('-')
        hour, minute, second = time.split(':')
        time_job = datetime.datetime(int(year), int(month), int(day), int(hour), int(minute), int(second))
        time_now = datetime.datetime(datetime.datetime.now(tz=tz).year, datetime.datetime.now(tz=tz).month,
                                     datetime.datetime.now(tz=tz).day, datetime.datetime.now(tz=tz).hour,
                                     datetime.datetime.now(tz=tz).minute, datetime.datetime.now(tz=tz).second)
        result = time_job - time_now

        await bot.send_message(message.chat.id,
                               text=f'{await username(message)}, –≤–∞–º –µ—â—ë –æ—Å—Ç–∞–ª–æ—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å {result} –º–∏–Ω ',
                               parse_mode='HTML')
    else:
        await message.answer(f'{await username(message)}, –≤—ã –Ω–∏–≥–¥–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ!', parse_mode='HTML')


# –û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –µ—Å–ª–∏ –Ω–µ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω
async def end_job_no_citizen(message: types.Message, job):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—à–∏–Ω–µ
    user_id = message.from_user.id
    job_info = database.jobs.find_one({'name_job': job})
    user_info = database.users.find_one({'id': user_id})
    if job == '–†–∞–±–æ—Ç–Ω–∏–∫ –º–∞–∫–∞':
        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                             'cash': user_info['cash'] + int(job_info['cash']),
                                                             'food': user_info['food'] + food_mak}})
        res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})
        await bot.send_message(message.chat.id,
                               f'{await username(message)}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                               f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                               f'üíµ +{job_info["cash"]}$\n'
                               f'üçî +{food_mak}–∫–≥ –ø–∏—â–∏\n', parse_mode='HTML')
    elif job == '–ü–æ–≤–∞—Ä':
        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                             'cash': user_info['cash'] + int(job_info['cash']),
                                                             'food': user_info['food'] + food_povar}})
        res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})
        await bot.send_message(message.chat.id,
                               f'{await username(message)}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                               f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                               f'üíµ +{job_info["cash"]}$\n'
                               f'üçî +{food_povar}–∫–≥ –ø–∏—â–∏\n', parse_mode='HTML')
    elif job == '–ü–µ–∫–∞—Ä—å' or job == '–ö–æ–Ω–¥–∏—Ç–µ—Ä':
        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                             'cash': user_info['cash'] + int(job_info['cash']),
                                                             'food': user_info['food'] + food_pekar}})
        res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})
        await bot.send_message(message.chat.id,
                               f'{await username(message)}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                               f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                               f'üíµ +{job_info["cash"]}$\n'
                               f'üçî +{food_pekar}–∫–≥ –ø–∏—â–∏\n', parse_mode='HTML')
    elif job == '–§–µ—Ä–º–µ—Ä':
        # –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                             'cash': user_info['cash'] + int(job_info['cash']),
                                                             'food': user_info['food'] + food_fermer}})
        res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})
        await bot.send_message(message.chat.id,
                               f'{await username(message)}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                               f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                               f'üíµ +{job_info["cash"]}$\n'
                               f'üçî +{food_fermer}–∫–≥ –ø–∏—â–∏\n', parse_mode='HTML')
    elif job == '–ù–µ—Ñ—Ç—è–Ω–∏–∫':
        oil = 50  # –ù–µ—Ñ—Ç—å
        # –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                             'cash': user_info['cash'] + int(job_info['cash']),
                                                             'oil': user_info['oil'] + oil}})
        res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})
        await bot.send_message(message.chat.id,
                               f'{await username(message)}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                               f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                               f'üíµ +{job_info["cash"]}$\n'
                               f'üñ§ +{oil}–ª\n', parse_mode='HTML')
    else:
        # –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                             'cash': user_info['cash'] + int(job_info['cash'])}})
        res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})
        await bot.send_message(message.chat.id,
                               f'{await username(message)}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                               f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                               f'üíµ +{job_info["cash"]}$\n', parse_mode='HTML')


# –û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –µ—Å–ª–∏ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω
async def end_job_citizen(message: types.Message, job):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—à–∏–Ω–µ
    user_id = message.from_user.id

    job_info = database.jobs.find_one({'name_job': job})
    user_info = database.users.find_one({'id': user_id})
    country_info = database.countries.find_one({'country': user_info['citizen_country']})
    if job == '–†–∞–±–æ—Ç–Ω–∏–∫ –º–∞–∫–∞':
        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                             'cash': user_info['cash'] + int(job_info['cash'] - round(
                                                                 int(job_info['cash']) * (
                                                                         country_info['nalog_job'] / 100))),
                                                             'food': user_info['food'] + round(food_mak * 0.1)}})
        res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})

        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω—ã
        database.countries.update_one({'country': user_info['citizen_country']}, {
            '$set': {'cash': country_info['cash'] + round(int(job_info['cash']) * (country_info['nalog_job'] / 100)),
                     'food': int(country_info['food']) + food_mak}})
        await bot.send_message(message.chat.id,
                               f'{await username(message)}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                               f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                               f'üíµ +{job_info["cash"] - round(int(job_info["cash"]) * (country_info["nalog_job"] / 100))}$\n'
                               f'üçî +{round(food_mak * 0.1)}–∫–≥ –ø–∏—â–∏\n'
                               f'–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É:\n'
                               f'üçî +{food_mak}–∫–≥ –ø–∏—â–∏\n'
                               f'üíµ +{round(int(job_info["cash"] * (country_info["nalog_job"] / 100)))}',
                               parse_mode='HTML')
    elif job == '–ü–æ–≤–∞—Ä':
        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                             'cash': user_info['cash'] + int(job_info['cash'] - round(
                                                                 int(job_info['cash']) * (
                                                                         country_info['nalog_job'] / 100))),
                                                             'food': user_info['food'] + round(food_povar * 0.1)}})
        res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})

        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω—ã
        database.countries.update_one({'country': user_info['citizen_country']}, {
            '$set': {'cash': country_info['cash'] + round(int(job_info['cash']) * (country_info['nalog_job'] / 100)),
                     'food': int(country_info['food']) + food_povar}})
        await bot.send_message(message.chat.id,
                               f'{await username(message)}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                               f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                               f'üíµ +{job_info["cash"] - round(int(job_info["cash"]) * (country_info["nalog_job"] / 100))}$\n'
                               f'üçî +{round(food_povar * 0.1)}–∫–≥ –ø–∏—â–∏\n'
                               f'–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É:\n'
                               f'üçî +{food_povar}–∫–≥ –ø–∏—â–∏\n'
                               f'üíµ +{round(int(job_info["cash"] * (country_info["nalog_job"] / 100)))}',
                               parse_mode='HTML')
    elif job == '–ü–µ–∫–∞—Ä—å' or job == '–ö–æ–Ω–¥–∏—Ç–µ—Ä':
        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                             'cash': user_info['cash'] + int(job_info['cash'] - round(
                                                                 int(job_info['cash']) * (
                                                                         country_info['nalog_job'] / 100))),
                                                             'food': user_info['food'] + round(food_pekar * 0.1)}})
        res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})

        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω—ã
        database.countries.update_one({'country': user_info['citizen_country']}, {
            '$set': {'cash': country_info['cash'] + round(int(job_info['cash']) * (country_info['nalog_job'] / 100)),
                     'food': int(country_info['food']) + food_pekar}})
        await bot.send_message(message.chat.id,
                               f'{await username(message)}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                               f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                               f'üíµ +{job_info["cash"] - round(int(job_info["cash"]) * (country_info["nalog_job"] / 100))}$\n'
                               f'üçî +{round(food_pekar * 0.1)}–∫–≥ –ø–∏—â–∏\n'
                               f'–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É:\n'
                               f'üçî +{food_pekar}–∫–≥ –ø–∏—â–∏\n'
                               f'üíµ +{round(int(job_info["cash"] * (country_info["nalog_job"] / 100)))}',
                               parse_mode='HTML')
    elif job == '–§–µ—Ä–º–µ—Ä':
        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                             'cash': user_info['cash'] + int(job_info['cash'] - round(
                                                                 int(job_info['cash']) * (
                                                                         country_info['nalog_job'] / 100))),
                                                             'food': user_info['food'] + round(food_fermer * 0.1)}})
        res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})

        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω—ã
        database.countries.update_one({'country': user_info['citizen_country']}, {
            '$set': {'cash': country_info['cash'] + round(int(job_info['cash']) * (country_info['nalog_job'] / 100)),
                     'food': int(country_info['food']) + food_fermer}})
        await bot.send_message(message.chat.id,
                               f'{await username(message)}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                               f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                               f'üíµ +{job_info["cash"] - round(int(job_info["cash"]) * (country_info["nalog_job"] / 100))}$\n'
                               f'üçî +{round(food_fermer * 0.1)}–∫–≥ –ø–∏—â–∏\n'
                               f'–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É:\n'
                               f'üçî +{food_fermer}–∫–≥ –ø–∏—â–∏\n'
                               f'üíµ +{round(int(job_info["cash"] * (country_info["nalog_job"] / 100)))}',
                               parse_mode='HTML')
    elif job == '–ù–µ—Ñ—Ç—è–Ω–∏–∫':
        oil = 50  # –ù–µ—Ñ—Ç—å
        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                             'cash': user_info['cash'] + int(job_info['cash'] - round(
                                                                 int(job_info['cash']) * (
                                                                         country_info['nalog_job'] / 100))),
                                                             'oil': user_info['oil'] + round(oil * 0.1)}})
        res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})

        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω—ã
        database.countries.update_one({'country': user_info['citizen_country']}, {
            '$set': {'cash': country_info['cash'] + round(int(job_info['cash']) * (country_info['nalog_job'] / 100)),
                     'oil': int(country_info['oil']) + oil}})
        await bot.send_message(message.chat.id,
                               f'{await username(message)}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                               f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                               f'üíµ +{job_info["cash"] - round(int(job_info["cash"]) * (country_info["nalog_job"] / 100))}$\n'
                               f'üñ§ +{round(oil * 0.1)}–ª\n'
                               f'–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É:\n'
                               f'üñ§ +{oil}–ª\n'
                               f'üíµ +{round(int(job_info["cash"] * (country_info["nalog_job"] / 100)))}',
                               parse_mode='HTML')
    else:
        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                             'cash': user_info['cash'] + int(job_info['cash'] - round(
                                                                 int(job_info['cash']) * (
                                                                         country_info['nalog_job'] / 100)))}})
        res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})

        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω—ã
        database.countries.update_one({'country': user_info['citizen_country']}, {
            '$set': {'cash': country_info['cash'] + round(int(job_info['cash']) * (country_info['nalog_job'] / 100))}})
        await bot.send_message(message.chat.id,
                               f'{await username(message)}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                               f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                               f'üíµ +{job_info["cash"] - round(int(job_info["cash"]) * (country_info["nalog_job"] / 100))}$\n'
                               f'–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É:\n'
                               f'üíµ +{round(int(job_info["cash"] * (country_info["nalog_job"] / 100)))}',
                               parse_mode='HTML')

# –û–∫–æ–Ω—á–∞–Ω–∏–µ –±–æ–ª–µ–∑–Ω–∏
async def end_disease(message: types.Message):
    user_id = message.from_user.id
    res_database.disease.delete_one({'id': user_id})
    await bot.send_message(message.chat.id, f'{await username(message)}, –≤—ã –≤—ã–∑–¥–æ—Ä–æ–≤–∏–ª–∏!', parse_mode='HTML')
def register_handlers_countries(dp: Dispatcher):
    dp.register_message_handler(work, content_types='text',
                                text=['/work', '—Ä–∞–±–æ—Ç–∞', '—Ä–∞–±–æ—Ç–∞—Ç—å', '–†–∞–±–æ—Ç–∞', '–†–∞–±–æ—Ç–∞—Ç—å', '—Ä–æ–±–æ—Ç–∞', '–†–æ–±–æ—Ç–∞'])
    dp.register_message_handler(getjob, content_types='text',
                                text=['—Ä–∞–±–æ—Ç—ã', '–†–∞–±–æ—Ç—ã', '/jobs', '–£—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É', '—É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É'])
    dp.register_message_handler(leavejob, content_types='text',
                                text=['–£–≤–æ–ª–∏—Ç—å—Å—è', '—É–≤–æ–ª–∏—Ç—å—Å—è', '/leavejob', '—É–≤–æ–ª–∏—Ç—Å—è', '–£–≤–æ–ª–∏—Ç—Å—è',
                                      '–£–≤–æ–ª–∏—Ç—Å—è —Å —Ä–∞–±–æ—Ç—ã', '—É–≤–æ–ª–∏—Ç—Å—è —Å —Ä–∞–±–æ—Ç—ã', '–£–≤–æ–ª–∏—Ç—å—Å—è —Å —Ä–∞–±–æ—Ç—ã',
                                      '—É–≤–æ–ª–∏—Ç—å—Å—è —Å —Ä–∞–±–æ—Ç—ã'])
