from aiogram import executor, types, Dispatcher
import json
import logging
import sqlite3
import os
import time
from aiogram.utils.markdown import hlink
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from create_bot import dp
from create_bot import bot
from aiogram.utils.markdown import quote_html
from time import perf_counter
from aiogram.types import InputFile
import pytz
import datetime
import asyncio
from dateutil import parser
import random
import math
from gpytranslate import Translator
import openai
import openai_async
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import hmac
import json
import hashlib
import requests
from filters.filters import IsQuestions, IsPromo, IsFootbal, IsBasketball, IsDice, IsDarts, IsBowling, \
    IsSlot, ShareMoney
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from PIL import Image, ImageDraw, ImageFont, ImageOps
from background import*
t = Translator()
openai.api_key = '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'

from pymongo.mongo_client import MongoClient

# –ë–î
database = MongoClient(
    "mongodb+srv://maksemqwerty:maksem228@cluster0.mylnsur.mongodb.net/?retryWrites=true&w=majority").data

res_database = MongoClient(
    "mongodb+srv://maksemqwerty:maksem228@cluster0.mylnsur.mongodb.net/?retryWrites=true&w=majority").res

food_mak = 40
food_povar = 90
food_pekar = 70
food_fermer = 200
# –ß—Ç–æ–±—ã –Ω–µ —Å–ª–µ—Ç–∞–ª–∏ –∏–º–ø–æ—Ä—Ç—ã
def imports():
    print(pytz)
    print(datetime)
    print(asyncio)
    print(parser)
    print(random)
    print(math)
    print(json)
    print(Dispatcher)
    print(AsyncIOScheduler)


# –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–∏–∞–¥—ã
import locale

locale.setlocale(locale.LC_ALL, "en_US.UTF-8")
#  –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async def on_startup(_):

    data_vuz = list(res_database.vuz.find())
    for info_vuz in data_vuz:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å —Å—Ç—Ä–æ–∫–∏
        tz = pytz.timezone('Etc/GMT-3')
        date, time = info_vuz['time'].split(' ')
        year, month, day = date.split('-')
        hour, minute, second = time.split(':')
        time_vuz = datetime(int(year), int(month), int(day), int(hour), int(minute), int(second))
        time_now = datetime(datetime.now(tz=tz).year, datetime.now(tz=tz).month,
                                     datetime.now(tz=tz).day, datetime.now(tz=tz).hour,
                                     datetime.now(tz=tz).minute, datetime.now(tz=tz).second)
        result = time_vuz - time_now
        # –ï—Å–ª–∏ —É–∂–µ –æ–∫–æ–Ω—á–∏–ª
        educ_info = database.education.find_one({'id': info_vuz["id"]})
        if '-' in str(result):
            user_info = database.users.find_one({'id': info_vuz["id"]})
            job_list = [i for i in educ_info['jobs'].split(' ')]
            job_list.append(str(educ_info["ucheb"]).replace('–í–£–ó', '').strip())
            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
            database.education.update_one({'id': info_vuz["id"]}, {'$set': {'ucheb': '–Ω–µ—Ç',
                                                                     'jobs': ' '.join(job_list)}})
            res_database.vuz.delete_one({'id': info_vuz["id"]})
            await bot.send_message(info_vuz["id"],
                                   f'{await username_2(info_vuz["id"], user_info["firstname"])}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –≤ –í–£–ó–µ "{str(educ_info["ucheb"]).replace("–í–£–ó", "").strip()}"\n'
                                   f'–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è {str(educ_info["ucheb"]).replace("–í–£–ó", "").strip()}', parse_mode='HTML')
        else:
            scheduler.add_job(start_vuz, trigger="date", run_date=info_vuz["time"], timezone=tz,
                              id=f'{info_vuz["id"]}_vuz',
                              args=(info_vuz["id"], str(educ_info["ucheb"]).replace("–í–£–ó", "").strip()))
    data_job = list(res_database.job.find({'working': True}))
    for info_job in data_job:
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å —Å—Ç—Ä–æ–∫–∏
            tz = pytz.timezone('Etc/GMT-3')

            date, time = info_job['time'].split(' ')
            year, month, day = date.split('-')
            hour, minute, second = time.split(':')
            time_vuz = datetime(int(year), int(month), int(day), int(hour), int(minute), int(second))
            time_now = datetime(datetime.now(tz=tz).year, datetime.now(tz=tz).month,
                                datetime.now(tz=tz).day, datetime.now(tz=tz).hour,
                                datetime.now(tz=tz).minute, datetime.now(tz=tz).second)
            result = time_vuz - time_now
            # –ï—Å–ª–∏ —É–∂–µ –æ–∫–æ–Ω—á–∏–ª

            if '-' in str(result):
                citizen = database.users.find_one({'id': info_job['id']})['citizen_country']
                # –ï—Å–ª–∏ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω
                if citizen != '–Ω–µ—Ç':
                    await end_job_citizen(info_job['id'], -1001529344518)
                else:
                    await end_job_no_citizen(info_job['id'], -1001529344518)
            else:
                citizen = database.users.find_one({'id': info_job['id']})['citizen_country']
                # –ï—Å–ª–∏ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω
                if citizen != '–Ω–µ—Ç':
                    scheduler.add_job(end_job_citizen, "date",
                                      run_date=info_job['time'],
                                      args=(info_job['id'],info_job['id']), id=str(info_job['id']), timezone=tz)
                else:
                    scheduler.add_job(end_job_no_citizen, "date",
                                      run_date=info_job['time'],
                                      args=(info_job['id'], info_job['id']), id=str(info_job['id']), timezone=tz)
        except:
            pass
    print('–ë–æ—Ç –æ–Ω–ª–∞–π–Ω')

# –û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –µ—Å–ª–∏ –Ω–µ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω
async def end_job_no_citizen(user_id, chat_id):
    try:

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—à–∏–Ω–µ
        user_info = database.users.find_one({'id': user_id})
        job_info = database.jobs.find_one({'name_job': user_info['job']})
        if user_info['job'] == '–†–∞–±–æ—Ç–Ω–∏–∫ –º–∞–∫–∞':
            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                                 'cash': user_info['cash'] + int(job_info['cash']),
                                                                 'food': user_info['food'] + food_mak}})
            res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})
            await bot.send_message(chat_id,
                                   f'{await username_2(user_id, user_info["firstname"])}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                                   f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                                   f'üíµ +{job_info["cash"]}$\n'
                                   f'üçî +{food_mak}–∫–≥ –ø–∏—â–∏\n', parse_mode='HTML')
        elif user_info['job'] == '–ü–æ–≤–∞—Ä':
            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                                 'cash': user_info['cash'] + int(job_info['cash']),
                                                                 'food': user_info['food'] + food_povar}})
            res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})
            await bot.send_message(chat_id,
                                   f'{await username_2(user_id, user_info["firstname"])}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                                   f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                                   f'üíµ +{job_info["cash"]}$\n'
                                   f'üçî +{food_povar}–∫–≥ –ø–∏—â–∏\n', parse_mode='HTML')
        elif user_info['job'] == '–ü–µ–∫–∞—Ä—å' or user_info['job'] == '–ö–æ–Ω–¥–∏—Ç–µ—Ä':
            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                                 'cash': user_info['cash'] + int(job_info['cash']),
                                                                 'food': user_info['food'] + food_pekar}})
            res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})
            await bot.send_message(chat_id,
                                   f'{await username_2(user_id, user_info["firstname"])}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                                   f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                                   f'üíµ +{job_info["cash"]}$\n'
                                   f'üçî +{food_pekar}–∫–≥ –ø–∏—â–∏\n', parse_mode='HTML')
        elif user_info['job'] == '–§–µ—Ä–º–µ—Ä':
            # –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                                 'cash': user_info['cash'] + int(job_info['cash']),
                                                                 'food': user_info['food'] + food_fermer}})
            res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})
            await bot.send_message(chat_id,
                                   f'{await username_2(user_id, user_info["firstname"])}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                                   f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                                   f'üíµ +{job_info["cash"]}$\n'
                                   f'üçî +{food_fermer}–∫–≥ –ø–∏—â–∏\n', parse_mode='HTML')
        elif user_info['job'] == '–ù–µ—Ñ—Ç—è–Ω–∏–∫':
            oil = 50  # –ù–µ—Ñ—Ç—å
            # –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                                 'cash': user_info['cash'] + int(job_info['cash']),
                                                                 'oil': user_info['oil'] + oil}})
            res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})
            await bot.send_message(chat_id,
                                   f'{await username_2(user_id, user_info["firstname"])}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                                   f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                                   f'üíµ +{job_info["cash"]}$\n'
                                   f'üñ§ +{oil}–ª\n', parse_mode='HTML')
        elif user_info['job'] == '–Ω–µ—Ç':

            res_database.job.delete_one({'id': user_id})
        else:
            # –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                                 'cash': user_info['cash'] + int(job_info['cash'])}})
            res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})
            await bot.send_message(chat_id,
                                   f'{await username_2(user_id, user_info["firstname"])}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                                   f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                                   f'üíµ +{job_info["cash"]}$\n', parse_mode='HTML')
    except:
        pass
# –û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –µ—Å–ª–∏ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω
async def end_job_citizen(user_id, chat_id):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    try:

        user_info = database.users.find_one({'id': user_id})
        job_info = database.jobs.find_one({'name_job': user_info['job']})
        country_info = database.countries.find_one({'country': user_info['citizen_country']})
        if user_info['job'] == '–†–∞–±–æ—Ç–Ω–∏–∫ –º–∞–∫–∞':
            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                                 'cash': user_info['cash'] + int(job_info['cash'] - round(
                                                                     int(job_info['cash']) * (
                                                                             country_info['nalog_job'] / 100))),
                                                                 'food': user_info['food'] + round(food_mak * 0.1)}})
            res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})

            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω—ã
            database.countries.update_one({'country': user_info['citizen_country']}, {
                '$set': {'cash': country_info['cash'] + round(int(job_info['cash']) * (country_info['nalog_job'] / 100)),
                         'food': int(country_info['food']) + food_mak}})
            await bot.send_message(chat_id,
                                   f'{await username_2(user_id, user_info["firstname"])}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                                   f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                                   f'üíµ +{job_info["cash"] - round(int(job_info["cash"]) * (country_info["nalog_job"] / 100))}$\n'
                                   f'üçî +{round(food_mak * 0.1)}–∫–≥ –ø–∏—â–∏\n'
                                   f'–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É:\n'
                                   f'üçî +{food_mak}–∫–≥ –ø–∏—â–∏\n'
                                   f'üíµ +{round(int(job_info["cash"] * (country_info["nalog_job"] / 100)))}',
                                   parse_mode='HTML')
        elif user_info['job'] == '–ü–æ–≤–∞—Ä':
            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                                 'cash': user_info['cash'] + int(job_info['cash'] - round(
                                                                     int(job_info['cash']) * (
                                                                             country_info['nalog_job'] / 100))),
                                                                 'food': user_info['food'] + round(food_povar * 0.1)}})
            res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})

            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω—ã
            database.countries.update_one({'country': user_info['citizen_country']}, {
                '$set': {'cash': country_info['cash'] + round(int(job_info['cash']) * (country_info['nalog_job'] / 100)),
                         'food': int(country_info['food']) + food_povar}})
            await bot.send_message(chat_id,
                                   f'{await username_2(user_id, user_info["firstname"])}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                                   f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                                   f'üíµ +{job_info["cash"] - round(int(job_info["cash"]) * (country_info["nalog_job"] / 100))}$\n'
                                   f'üçî +{round(food_povar * 0.1)}–∫–≥ –ø–∏—â–∏\n'
                                   f'–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É:\n'
                                   f'üçî +{food_povar}–∫–≥ –ø–∏—â–∏\n'
                                   f'üíµ +{round(int(job_info["cash"] * (country_info["nalog_job"] / 100)))}',
                                   parse_mode='HTML')
        elif user_info['job'] == '–ü–µ–∫–∞—Ä—å' or user_info['job'] == '–ö–æ–Ω–¥–∏—Ç–µ—Ä':
            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                                 'cash': user_info['cash'] + int(job_info['cash'] - round(
                                                                     int(job_info['cash']) * (
                                                                             country_info['nalog_job'] / 100))),
                                                                 'food': user_info['food'] + round(food_pekar * 0.1)}})
            res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})

            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω—ã
            database.countries.update_one({'country': user_info['citizen_country']}, {
                '$set': {'cash': country_info['cash'] + round(int(job_info['cash']) * (country_info['nalog_job'] / 100)),
                         'food': int(country_info['food']) + food_pekar}})
            await bot.send_message(chat_id,
                                   f'{await username_2(user_id, user_info["firstname"])}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                                   f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                                   f'üíµ +{job_info["cash"] - round(int(job_info["cash"]) * (country_info["nalog_job"] / 100))}$\n'
                                   f'üçî +{round(food_pekar * 0.1)}–∫–≥ –ø–∏—â–∏\n'
                                   f'–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É:\n'
                                   f'üçî +{food_pekar}–∫–≥ –ø–∏—â–∏\n'
                                   f'üíµ +{round(int(job_info["cash"] * (country_info["nalog_job"] / 100)))}',
                                   parse_mode='HTML')
        elif user_info['job'] == '–§–µ—Ä–º–µ—Ä':
            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                                 'cash': user_info['cash'] + int(job_info['cash'] - round(
                                                                     int(job_info['cash']) * (
                                                                             country_info['nalog_job'] / 100))),
                                                                 'food': user_info['food'] + round(food_fermer * 0.1)}})
            res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})

            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω—ã
            database.countries.update_one({'country': user_info['citizen_country']}, {
                '$set': {'cash': country_info['cash'] + round(int(job_info['cash']) * (country_info['nalog_job'] / 100)),
                         'food': int(country_info['food']) + food_fermer}})
            await bot.send_message(chat_id,
                                   f'{await username_2(user_id, user_info["firstname"])}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                                   f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                                   f'üíµ +{job_info["cash"] - round(int(job_info["cash"]) * (country_info["nalog_job"] / 100))}$\n'
                                   f'üçî +{round(food_fermer * 0.1)}–∫–≥ –ø–∏—â–∏\n'
                                   f'–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É:\n'
                                   f'üçî +{food_fermer}–∫–≥ –ø–∏—â–∏\n'
                                   f'üíµ +{round(int(job_info["cash"] * (country_info["nalog_job"] / 100)))}',
                                   parse_mode='HTML')
        elif user_info['job'] == '–ù–µ—Ñ—Ç—è–Ω–∏–∫':
            oil = 50  # –ù–µ—Ñ—Ç—å
            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                                 'cash': user_info['cash'] + int(job_info['cash'] - round(
                                                                     int(job_info['cash']) * (
                                                                             country_info['nalog_job'] / 100))),
                                                                 'oil': user_info['oil'] + round(oil * 0.1)}})
            res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})

            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω—ã
            database.countries.update_one({'country': user_info['citizen_country']}, {
                '$set': {'cash': country_info['cash'] + round(int(job_info['cash']) * (country_info['nalog_job'] / 100)),
                         'oil': int(country_info['oil']) + oil}})
            await bot.send_message(chat_id,
                                   f'{await username_2(user_id, user_info["firstname"])}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                                   f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                                   f'üíµ +{job_info["cash"] - round(int(job_info["cash"]) * (country_info["nalog_job"] / 100))}$\n'
                                   f'üñ§ +{round(oil * 0.1)}–ª\n'
                                   f'–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É:\n'
                                   f'üñ§ +{oil}–ª\n'
                                   f'üíµ +{round(int(job_info["cash"] * (country_info["nalog_job"] / 100)))}',
                                   parse_mode='HTML')
        elif user_info['job'] == '–Ω–µ—Ç':
            res_database.job.delete_one({'id': user_id})

        else:
            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            database.users.update_one({'id': user_id}, {'$set': {'exp': user_info['exp'] + int(job_info['exp_for_job']),
                                                                 'cash': user_info['cash'] + int(job_info['cash'] - round(
                                                                     int(job_info['cash']) * (
                                                                             country_info['nalog_job'] / 100)))}})
            res_database.job.update_one({'id': user_id}, {'$set': {'working': False}})

            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω—ã
            database.countries.update_one({'country': user_info['citizen_country']}, {
                '$set': {'cash': country_info['cash'] + round(int(job_info['cash']) * (country_info['nalog_job'] / 100))}})
            await bot.send_message(chat_id,
                                   f'{await username_2(user_id, user_info["firstname"])}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ:\n'
                                   f'üèµ +{job_info["exp_for_job"]} –æ–ø—ã—Ç–∞\n'
                                   f'üíµ +{job_info["cash"] - round(int(job_info["cash"]) * (country_info["nalog_job"] / 100))}$\n'
                                   f'–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É:\n'
                                   f'üíµ +{round(int(job_info["cash"] * (country_info["nalog_job"] / 100)))}',
                                   parse_mode='HTML')
    except:
        pass

async def isSubsc(message):
    members = await bot.get_chat_member(chat_id=-1001879290440, user_id=message.from_user.id)
    if members['status'] != 'left':
        return
    else:
        await bot.send_message(message.chat.id,
                               f'{await username(message)}, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ, –≤—ã –¥–æ–ª–∂–Ω—ã —Å–æ—Å—Ç–æ—è—Ç—å –≤ –º–æ–µ–º –∫–∞–Ω–∞–ª–µ @makbotinfo', parse_mode='HTML')

@dp.message_handler(commands='start')
async def start(message: types.Message):
    if message.get_args():
        refer_info = database.users.find_one({'id': message.from_user.id})
        if refer_info is None:
            await check_user(message)
            database.users.update_one({'id': message.from_user.id}, {'$set': {'cash': 2500,
                                                                              'exp': 50}})
            await bot.send_message(message.chat.id, '–í–∞–º –±—ã–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã:\n'
                                                    '    - 2500$\n'
                                                    '    - 50 –æ–ø—ã—Ç–∞')
            user_info = database.users.find_one({'id': int(message.get_args().split(' ')[0])})
            database.users.update_one({'id': int(message.get_args().split(' ')[0])}, {'$set': {'cash': user_info["cash"] + 5000,
                                                                              'exp': user_info["exp"] + 100}})
            await bot.send_message(int(message.get_args().split(' ')[0]), '–í–∞–º –±—ã–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∑–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞:\n'
                                                    '    - 5000$\n'
                                                    '    - 100 –æ–ø—ã—Ç–∞')

# /help –ü–æ–º–æ—â—å
@dp.message_handler(commands='help')
async def help(message):
    await message.delete()
    await bot.send_message(message.chat.id, f'–Ø, –ø–∞—Å–ø–æ—Ä—Ç, –ø—Ä–æ—Ñ–∏–ª—å, –±–∞–ª–∞–Ω—Å - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n'
                                            f'–°—Ç—Ä–∞–Ω—ã - –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω\n'
                                            f'/citizen - –°—Ç–∞—Ç—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º\n'
                                            f'/leave_citizen - –ü–æ–∫–∏–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω—É\n'
                                            f'/cars - –ò–Ω—Ñ–æ –æ –º–∞—à–∏–Ω–∞—Ö\n'
                                            f'/shop - –ú–∞–≥–∞–∑–∏–Ω\n'
                                            f'/bonus - –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å\n'
                                            f'/bus - –ë–∏–∑–Ω–µ—Å—ã\n'
                                            f'/games - –°–ø–∏—Å–æ–∫ –∏–≥—Ä\n'
                                            f'–†–∞–±–æ—Ç–∞, —Ä–∞–±–æ—Ç–∞—Ç—å - –†–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç–µ\n'
                                            f'–†–∞–±–æ—Ç—ã - –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç\n'
                                            f'–£–≤–æ–ª–∏—Ç—å—Å—è - –£–≤–æ–ª–∏—Ç—å—Å—è —Å —Ä–∞–±–æ—Ç—ã\n'
                                            f'–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã - –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–ø. –∫–æ–º–∞–Ω–¥\n'
                                            f'–¢–æ–ø - –í—ã–≤–æ–¥–∏—Ç —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ–ø—ã—Ç—É\n'
                                            f'–¢–æ–ø —á–∞—Ç–∞ - –í—ã–≤–æ–¥–∏—Ç —Ç–æ–ø —á–∞—Ç–∞\n'
                                            f'–ü–æ–æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –ë–æ—Ç .... (–ø—Ä–∏–º–µ—Ä: –±–æ—Ç –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –±—Ä–µ—Å—Ç–µ)\n'
                                            f'–ú–æ–π –∫–∞–Ω–∞–ª: @makbotinfo')


# –ò–≥—Ä—ã
@dp.message_handler(commands='games')
async def ginfo(message):
    await check_user(message)
    await bot.send_message(message.chat.id, '–í —ç—Ç–æ–º –±–æ—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é —Ç–∞–∫–∏–µ –∏–≥—Ä—ã –∫–∞–∫:\n'
                                            '1. –§—É—Ç–±–æ–ª‚öΩÔ∏è - –≥–æ–ª (—Å—Ç–∞–≤–∫–∞), –ø—Ä–∏–º–µ—Ä: –≥–æ–ª 10–∫\n'
                                            '2. –ë–∞—Å–∫–µ—Ç–±–æ–ªüèÄ - –±–∞—Å–∫ (—Å—Ç–∞–≤–∫–∞), –ø—Ä–∏–º–µ—Ä: –±–∞—Å–∫ 10–∫\n'
                                            '3. –ö–æ—Å—Ç–∏üé≤ - –∫–æ—Å—Ç–∏ (—Å—Ç–∞–≤–∫–∞) (—Ü–∏—Ñ—Ä–∞), –ø—Ä–∏–º–µ—Ä: –∫–æ—Å—Ç–∏ 10–∫ 3\n'
                                            '4. –ë–æ—É–ª–∏–Ω–≥üé≥ - –±–æ—É–ª–∏–Ω–≥ (—Å—Ç–∞–≤–∫–∞), –ø—Ä–∏–º–µ—Ä: –±–æ—É–ª–∏–Ω–≥ 10–∫\n'
                                            '5. –î–∞—Ä—Ç—ÅüéØ - –¥–∞—Ä—Ç—Å (—Å—Ç–∞–≤–∫–∞), –ø—Ä–∏–º–µ—Ä: –¥–∞—Ä—Ç—Å 10–∫\n'
                                            '6. –°–ª–æ—Çüé∞ - —Å–ª–æ—Ç (—Å—Ç–∞–≤–∫–∞), –ø—Ä–∏–º–µ—Ä: —Å–ª–æ—Ç 10–∫\n')


# –ü–µ—Ä–¥–∞—á–∞ –¥–µ–Ω–µ–≥
@dp.message_handler(ShareMoney())
async def sharemoney(message):
    user_id = message.from_user.id
    await check_user(message)

    text = message.text.capitalize().split()
    value = text[0].split('–∫')
    value_mon = list(value[0])
    sym = value_mon.pop(0)
    end_value = ''.join(value_mon)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ (—Ü–∏—Ñ—Ä—ã –ø–µ—Ä–¥ –ö)
    amount_k = len(value) - 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ö (1–∫ == 1000)
    money_for_share = int(end_value) * 1000 ** amount_k
    table_users = database.users
    amount_money_give_user = table_users.find_one({'id': user_id})
    member = await bot.get_chat_member(message.chat.id, user_id)
    admin = member.is_chat_creator()
    if message.reply_to_message:
        id_get_users = message.reply_to_message.from_user.id
        amount_money_get_user = table_users.find_one({'id': id_get_users})
        if sym == '+' and amount_money_give_user['cash'] >= money_for_share:
            table_users.update_one({'id': id_get_users},
                                   {'$set': {'cash': amount_money_get_user['cash'] + money_for_share}})
            table_users.update_one({'id': user_id},
                                   {'$set': {'cash': amount_money_give_user['cash'] - money_for_share}})
            await bot.send_message(message.chat.id,
                                   f'{await username(message)} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª {await username(message.reply_to_message)} —Å—É–º–º—É {money_for_share:n}$'.replace(
                                       ',', ' '), parse_mode='HTML')
        elif sym == '-' and money_for_share <= amount_money_get_user['cash']:
            if admin:
                table_users.update_one({'id': id_get_users},
                                       {'$set': {'cash': amount_money_get_user['cash'] - money_for_share}})
                table_users.update_one({'id': user_id},
                                       {'$set': {'cash': amount_money_give_user['cash'] + money_for_share}})

                await bot.send_message(message.chat.id,
                                       f'{await username(message)} —É—Å–ø–µ—à–Ω–æ –∑–∞–Ω—è–ª —É {await username(message.reply_to_message)} —Å—É–º–º—É {money_for_share:n}$'.replace(
                                           ',', ' '), parse_mode='HTML')
            else:
                await bot.send_message(message.chat.id, f'{await username(message)}, –≤–∞–º –º–∏–∫—Ä–æ–∑–∞–π–º –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω', parse_mode='HTML')
        else:
            await bot.send_message(message.chat.id, f'{await username(message)}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', parse_mode='HTML')


# –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(content_types='text', text=['–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã', '–º–æ–∏ –∫–æ–º–∞–Ω–¥—ã'])
async def moi_komandi(message):
    await check_user(message)
    await isSubsc(message)
    info_user = database.users.find_one({'id': message.from_user.id})
    job = info_user['job']
    ispresident = info_user['president_country']
    if message.chat.type == 'private':
        if ispresident != '–Ω–µ—Ç':
            msg_data = [f'üõ† –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n'
                        f'/get_citizen, –í–∑—è—Ç—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ - –¥–µ–ª–∞–µ—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º —Å–≤–æ–µ–π —Å—Ç—Ä–∞–Ω—ã (–Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞)\n'
                        f'/nalog 1 - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–ª–æ–≥ –Ω–∞ —Ä–∞–±–æ—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ 1% (—Ü–∏—Ñ—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–∞—è –æ—Ç 0 –¥–æ 100)\n'
                        f'/mycitizens, –ì—Ä–∞–∂–¥–∞–Ω–µ, –ú–æ–∏ –≥—Ä–∞–∂–¥–∞–Ω–µ - –ø–æ–∫–∞–∂–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≥—Ä–∞–∂–¥–∞–Ω–æ–≤\n'
                        f'/ccash - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–Ω—å–≥–∞–º–∏ –≤ –∫–∞–∑–Ω–µ\n'
                        f'/cpass, –û —Å—Ç—Ä–∞–Ω–µ, –ú–æ—è —Å—Ç—Ä–∞–Ω–∞ - –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ\n'
                        f'/sell_country, –ü—Ä–æ–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω—É - –ø—Ä–æ–¥–∞–∂–∞ —Å—Ç—Ä–∞–Ω—ã']
            await bot.send_message(message.chat.id,
                                   ''.join(msg_data))
        if job == '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å':
            msg_data = [f'üõ† –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n'
                        f'/bus - –≤—Å–µ –±–∏–∑–Ω–µ—Å—ã\n'
                        f'/mybus - —Å–≤–µ–¥–µ–Ω–∏—è –æ –±–∏–∑–Ω–µ—Å–µ\n'
                        f'/buybus - –ø–æ–∫—É–ø–∫–∞ –±–∏–∑–Ω–µ—Å–∞\n'
                        f'/build_bus - —Å—Ç—Ä–æ–∏—Ç—å –±–∏–∑–Ω–µ—Å\n'
                        f'/cancel_bus - –æ—Ç–º–µ–Ω–∞ —Å—Ç—Ä–æ–π–∫–∏\n'
                        f'/sell_bus - –ø—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å\n'
                        f'/bpay - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—ã –∫–∞–∂–¥–æ–º—É —Å—Ç—Ä–æ–∏—Ç–µ–ª—é\n']
            await bot.send_message(message.chat.id,
                                   ''.join(msg_data))
        elif job == '–°—Ç—Ä–æ–∏—Ç–µ–ª—å':
            msg_data = [f'üõ† –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n'
                        f'/build - –Ω–∞–π—Ç–∏ –∏ —É—Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–∞ —Å—Ç—Ä–æ–π–∫—É\n'
                        f'/leave_build - —É–π—Ç–∏ —Å–æ —Å—Ç—Ä–æ–π–∫–∏']
            await bot.send_message(message.chat.id,
                                   ''.join(msg_data))
        elif job == '–ê–≤—Ç–æ—Å–±–æ—Ä—â–∏–∫':
            msg_data = [f'üõ† –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n'
                        f'/creater - –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ\n']
            await bot.send_message(message.chat.id,
                                   ''.join(msg_data))
        elif job == '–ö—Ä—É–ø—å–µ':
            msg_data = [f'üõ† –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n'
                        f'–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É - –°–æ–∑–¥–∞–µ—Ç —Å—Ç–æ–ª–∏–∫ —Å –∏–≥—Ä–æ–π\n'
                        f'/stavka - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞–≤–∫—É —Å—Ç–æ–ª–∞\n'
                        f'–†—É–ª–µ—Ç–∫–∞ - –í—ã–≤–æ–¥–∏—Ç –≤–∞—à —Å—Ç–æ–ª–∏–∫']
            await bot.send_message(message.chat.id,
                                   ''.join(msg_data))
        elif job == '–§–µ–ª—å–¥—à–µ—Ä':
            msg_data = [f'üõ† –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n'
                        f'/heal 10 - –ª–µ—á–µ–Ω–∏–µ –±–æ–ª—å–Ω–æ–≥–æ –∑–∞ 10$ (–Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª—å–Ω–æ–≥–æ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π, —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–∞—è)']
            await bot.send_message(message.chat.id,
                                   ''.join(msg_data))
        else:
            await bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º')
    else:
        await bot.send_message(message.chat.id,
                               f'{await username(message)}, –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!', parse_mode='HTML')


# /ping –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞ –±–æ—Ç–∞
@dp.message_handler(content_types='text', text=['–ø–∏–Ω–≥', '–ü–∏–Ω–≥', '–ë–æ—Ç', '–±–æ—Ç'])
async def ping(message):
    await message.delete()
    start = perf_counter()

    msg = await bot.send_message(message.chat.id, message_thread_id=message.message_thread_id, text="‚úÖ<b>Pong!</b>",
                                 parse_mode=types.ParseMode.HTML)
    user_info = database.users.find_one({'id': message.from_user.id})
    end = perf_counter()
    await msg.edit_text(f"‚úÖ<b>Pong! {round(end - start, 3)}s</b>", parse_mode=types.ParseMode.HTML)


# /me –ü–∞—Å—Å–ø–æ—Ä—Ç
@dp.message_handler(content_types='text',
                    text=['/me', '—è', '–Ø', '–ü–∞—Å–ø–æ—Ä—Ç', '–ø–∞—Å–ø–æ—Ä—Ç', '–ü—Ä–æ—Ñ–∏–ª—å', '–ø—Ä–æ—Ñ–∏–ª—å', '–ë–∞–ª–∞–Ω—Å', '–±–∞–ª–∞–Ω—Å'])
async def me(message):
    await check_user(message)
    user_id = message.from_user.id
    table_users = database.users
    user_info = table_users.find_one({'id': user_id})
    img = Image.open(f'{os.getcwd()}/res/me_pic/pattern.png').convert("RGBA")
    font = ImageFont.truetype(f'{os.getcwd()}/res/fonts/Arimo-SemiBold.ttf', size=40)
    draw_text = ImageDraw.Draw(img)
    # –æ–ø—ã—Ç
    draw_text.text((155, 269),
                   str(user_info["exp"]),
                   font=font,
                   fill=213)
    # —Ä–∞–±–æ—Ç–∞
    draw_text.text((155, 325),
                   str(user_info["job"]),
                   font=font,
                   fill=213)
    # –¥–µ–Ω—å–≥–∏
    draw_text.text((155, 377),
                   str(user_info["cash"]),
                   font=font,
                   fill=213)
    # –Ω–µ—Ñ—Ç—å
    draw_text.text((580, 269),
                   str(user_info["oil"]),
                   font=font,
                   fill=213)
    # –µ–¥–∞
    draw_text.text((580, 325),
                   str(user_info["food"]),
                   font=font,
                   fill=213)
    # –∫—Ä–∏–ø—Ç–∞
    draw_text.text((580, 377),
                   str(0),
                   font=font,
                   fill=213)
    # –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ
    if user_info['citizen_country'] == '–Ω–µ—Ç':
        draw_text.text((155, 445),
                       '–ë–µ–∂–µ–Ω–µ—Ü',
                       font=font,
                       fill='#0D0D0D')
    elif user_info['citizen_country'] != '–Ω–µ—Ç' and user_info['president_country'] == '–Ω–µ—Ç':
        draw_text.text((155, 445),
                       user_info['citizen_country'],
                       font=font,
                       fill='#0D0D0D')
    elif user_info['citizen_country'] != '–Ω–µ—Ç' and user_info['president_country'] != '–Ω–µ—Ç':
        draw_text.text((155, 445),
                       f'{user_info["citizen_country"]}, –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç',
                       font=font,
                       fill='#0D0D0D')
    # –¥–∞—Ç–∞
    tz = pytz.timezone('Etc/GMT-3')
    time_now = f'{datetime.now(tz=tz).day}.{f"0{datetime.now(tz=tz).month}" if len(str(datetime.now(tz=tz).month)) == 1 else datetime.now(tz=tz).month}.{datetime.now(tz=tz).year}\n{datetime.now(tz=tz).hour}:{f"0{datetime.now(tz=tz).minute}" if len(str(datetime.now(tz=tz).minute)) == 1 else datetime.now(tz=tz).minute}'
    font_time = ImageFont.truetype(f'{os.getcwd()}/res/fonts/Arimo-SemiBold.ttf', size=24)
    draw_text.text((820, 446),
                   time_now,
                   font=font_time,
                   fill=15)
    # —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    user_profile_photo = await bot.get_user_profile_photos(message.from_user.id, limit=1)
    if user_profile_photo.photos:
        file = await bot.get_file(user_profile_photo.photos[0][0].file_id)
        await bot.download_file(file.file_path, f'{os.getcwd()}/res/me_pic/profile.png')
        img_profile = Image.open(f'{os.getcwd()}/res/me_pic/profile.png').convert("RGBA")
        # —Å–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–∞
        size = (180, 180)
        mask = Image.new('L', size, 0)
        draw = ImageDraw.Draw(mask)
        draw.ellipse((0, 0) + size, fill=255)
        output = ImageOps.fit(img_profile, mask.size, centering=(0.5, 0.5))
        output.putalpha(mask)
        output.save(f'{os.getcwd()}/res/me_pic/profile2.png')

        img_profile2 = Image.open(f'{os.getcwd()}/res/me_pic/profile2.png').convert("RGBA")
        img.alpha_composite(img_profile2, (100, 60))
    else:
        print('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ñ–æ—Ç–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.')
    # –ò–º—è
    draw_text.text((300, 90),
                   message.from_user.first_name,
                   font=font,
                   fill=213)
    # ID
    font_id = ImageFont.truetype(f'{os.getcwd()}/res/fonts/Arimo-SemiBold.ttf', size=25)
    draw_text.text((300, 140),
                   f'ID: {message.from_user.id}',
                   font=font_id,
                   fill=213)
    img.save(f'{os.getcwd()}/res/me_pic/res.png')
    await bot.send_photo(message.chat.id, photo=InputFile(f'{os.getcwd()}/res/me_pic/res.png'))

    """await bot.send_message(message.chat.id,
                           text=f'ü™™ <b>–ü–∞—Å–ø–æ—Ä—Ç</b> {await username(message)}\n'
                                f'üíµ –î–µ–Ω—å–≥–∏: {user_info["cash"]}$\n'
                                f'üèµ –û–ø—ã—Ç: {user_info["exp"]}\n'
                                f'üë®‚Äç‚öñÔ∏è–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç: {user_info["president_country"]}\n'
                                f'üë® –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω: {user_info["citizen_country"]}\n'
                                f'üõ† –†–∞–±–æ—Ç–∞: {user_info["job"]}\n'
                                f'üñ§ –ù–µ—Ñ—Ç–∏: {user_info["oil"]}–ª\n'
                                f'üçî –ï–¥—ã: {user_info["food"]}–∫–≥',
                           disable_web_page_preview=True,
                           parse_mode='HTML')"""


# /countries –°—Ç—Ä–∞–Ω—ã
@dp.message_handler(content_types='text', text=['—Å—Ç—Ä–∞–Ω—ã', '–°—Ç—Ä–∞–Ω—ã', '/countries'])
async def countries(message):
    await check_user(message)
    countries_settings = database.countries.find()
    # countries_settings = cur.execute("""SELECT country, cost, president FROM countries""").fetchall()
    buttons = InlineKeyboardMarkup(1)
    for country in countries_settings:
        if country['president'] == 0:
            but = InlineKeyboardButton(f'{country["country"]} —Ü–µ–Ω–∞: {country["cost"]:n}$',
                                       callback_data=f'buy_country_{country["country"]}')
            buttons.insert(but)
        else:
            idname = await bot.get_chat(country['president'])
            named = quote_html(idname.username)
            but = InlineKeyboardButton(f'{country["country"]} –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç - {named}',
                                       callback_data='president')
            buttons.insert(but)
    await bot.send_message(message.chat.id, text='üåê –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω üåê',
                           reply_markup=buttons)


# /citizen –°—Ç–∞—Ç—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º –∏–Ω—Ñ–æ
@dp.message_handler(commands='citizen')
async def citizen(message):
    await check_user(message)
    isCitizen = database.users.find_one({'id': message.from_user.id})
    if isCitizen["citizen_country"] == '–Ω–µ—Ç':  # –ï—Å–ª–∏ –Ω–µ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω
        data_user = database.users.find({'president_country': {'$ne': '–Ω–µ—Ç'}})
        presidents = [f'{await username(message)}, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º, –Ω–∞–ø–∏—à–∏ –æ–¥–Ω–æ–º—É –∏–∑ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤üôÜ‚Äç‚ôÇÔ∏è\n']
        if data_user is not None:
            for user in data_user:
                idname = await bot.get_chat(user['id'])
                named = quote_html(idname.username)
                presidents.append(f'{await username_2(user["id"], named)} - {user["president_country"]}\n')
            await message.answer(''.join(presidents), parse_mode='HTML')
        else:
            presidents.append('–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –Ω–µ—Ç')
            await message.answer(''.join(presidents), parse_mode='HTML')
    else:
        await message.answer(f'{await username(message)}, –≤—ã —É–∂–µ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω —Å—Ç—Ä–∞–Ω—ã {isCitizen["citizen_country"]}\n'
                             f'–ß—Ç–æ–±—ã –ø–æ–∫–∏–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω—É –Ω–∞–ø–∏—à–∏ /leave_citizen', parse_mode='HTML')


# /leave_citizen –ü–æ–∫–∏–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω—É
@dp.message_handler(commands='leave_citizen')
async def leave_citizen(message):
    await check_user(message)
    user_data = database.users.find_one({'id': message.from_user.id})
    if user_data["citizen_country"] == '–Ω–µ—Ç':  # –ï—Å–ª–∏ –Ω–µ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω
        await message.answer(f'{await username(message)}, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º –∫–∞–∫–æ–π-–ª–∏–±–æ —Å—Ç—Ä–∞–Ω—ã', parse_mode='HTML')
    elif user_data['president_country'] != '–Ω–µ—Ç':
        await message.answer(f'{await username(message)}, –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω—É', parse_mode='HTML')

    else:
        if not user_data['working']:
            president_data = database.users.find_one({'president_country': user_data["citizen_country"]})
            database.users.update_one({'id': message.from_user.id}, {'$set': {'citizen_country': '–Ω–µ—Ç'}})
            await message.answer(
                f'{await username_2(user_data["citizen_country"], president_data["firstname"])}, —É –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç —ç—Ç–æ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ {await username(message)}', parse_mode='HTML')
        else:
            try:
                await message.answer(f'{await username(message)}, —Å–Ω–∞—á–∞–ª–∞ –æ–∫–æ–Ω—á–∏—Ç–µ —Ä–∞–±–æ—Ç—É!', parse_mode='HTML')
            except:
                database.users.update_one({'id': message.from_user.id}, {'$set': {'working': False}})
                database.users.update_one({'id': message.from_user.id}, {'$set': {'job': '–Ω–µ—Ç'}})
                await message.answer(f'{await username(message)}, –≤—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å—Ç—Ä–∞–Ω—É!', parse_mode='HTML')


# /cars –í—Å–µ –º–∞—à–∏–Ω—ã –≤ –º–∏—Ä–µ
@dp.message_handler(commands='cars')
async def cars(message):
    await check_user(message)
    num_car = message.get_args().split()
    cars_data = database.cars.find()
    if len(num_car) == 0:
        cars_list = ['üöó –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ –≤ –º–∏—Ä–µ:\n']
        num = 1
        for car in cars_data:
            cars_list.append(f'{num}. {car["name_car"]} ({car["color"]})\n')
            num += 1
        cars_list.append(
            f'\n‚ùóÔ∏è –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –º–∞—à–∏–Ω–µ –≤–≤–µ–¥–∏—Ç–µ /cars 1 (–≥–¥–µ 1 - –ø–æ–∑–∏—Ü–∏—è –º–∞—à–∏–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ)')
        await message.answer(''.join(cars_list))
    elif len(num_car) == 1:
        try:
            num_car = int(num_car[0])
            await bot.send_photo(message.chat.id, photo=InputFile(
                f'res/cars_pic/{cars_data[num_car - 1]["name_car"] + " " + cars_data[num_car - 1]["color"]}.png'),
                                 caption=f'üöò –û –º–∞—à–∏–Ω–µ:\n'
                                         f'‚Ñ¢Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {cars_data[num_car - 1]["name_car"]}\n'
                                         f'üè≥Ô∏è‚Äçüåà –¶–≤–µ—Ç: {cars_data[num_car - 1]["color"]}\n'
                                         f'üêé –ú–æ—â–Ω–æ—Å—Ç—å: {cars_data[num_car - 1]["hp"]}–ª.—Å.\n'
                                         f'üñ§ –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –≤ —á–∞—Å: {cars_data[num_car - 1]["fuel_per_hour"]}–ª\n'
                                         f'üõ† –£–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –Ω–∞: {cars_data[num_car - 1]["save_job_time"]}%\n'
                                         f'üåê –°—Ç—Ä–∞–Ω–∞-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {cars_data[num_car - 1]["country"]}\n'
                                         f'‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö: {cars_data[num_car - 1]["count"]}—à—Ç.\n'
                                         f'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cars_data[num_car - 1]["cost"]:n}$')
        except:
            print(f'res/cars_pic/{cars_data[num_car - 1]["name_car"] + " " + cars_data[num_car - 1]["color"]}.png')



@dp.message_handler(commands='id')
async def n1(message):
    await message.reply(f'–ú–æ–π ID: {message.from_user.id}\n'
                        f'ID —á–∞—Ç–∞: {message.chat.id}')


@dp.message_handler(IsQuestions())
async def text(message):
    token_openai = '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'
    chats = [-1001769791322, -1001529344518]
    if message.reply_to_message and message.reply_to_message['from'][
        'is_bot'] and message.chat.id in chats or '–±–æ—Ç' in message.text.split() and message.chat.id in chats or '–ë–æ—Ç' in message.text.split() and message.chat.id in chats:

        msg = await bot.send_message(message.chat.id, f'{message.from_user.first_name}, –≤–∞—à –æ—Ç–≤–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è!',
                                     reply_to_message_id=message.message_id)

        response = await openai_async.complete(
            token_openai,
            timeout=30,
            payload={
                "model": "text-davinci-003",
                "prompt": f"{message.text.capitalize().replace('–±–æ—Ç', '')}",
                "max_tokens": 500,
                "temperature": 0,
                "top_p": 1,
                "n": 1

            },
        )
        await bot.edit_message_text(response.json()["choices"][0]["text"].strip(), message.chat.id, msg.message_id)
    elif message.reply_to_message and message.reply_to_message['from'][
        'is_bot'] and message.chat.id not in chats or '–±–æ—Ç' in message.text.split() and message.chat.id not in chats or '–ë–æ—Ç' in message.text.split() and message.chat.id not in chats:
        await message.answer(
            '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ò–ò –∏ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–µ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @KJIUKU')


@dp.message_handler(IsPromo())
async def text(message):
    await check_user(message)
    with open(f'{os.getcwd()}/res/promo.txt', 'r', encoding='utf-8') as f:
        data = f.readlines()
        f.close()
        for line in data:
            if line.split('.')[0].lower() == message.text.lower():
                await isSubsc(message)
                amount_activations = database.promo.count_documents({"promo": line.split('.')[0].lower()})
                if int(amount_activations) < int(line.split('.')[3]):
                    isActivated = database.promo.find_one({'$and': [{'promo': line.split('.')[0].lower()},
                                                          {'id': message.from_user.id}]})
                    if isActivated is None:
                        database.promo.insert_one({'id': message.from_user.id,
                                                   'promo': line.split('.')[0].lower()})
                        user_info = database.users.find_one({'id': message.from_user.id})
                        database.users.update_one({'id': message.from_user.id}, {'$set': {
                            'cash': user_info["cash"] + int(line.split(".")[1]),
                            'exp': user_info["exp"] + int(line.split(".")[2])
                        }})
                        await bot.send_message(message.chat.id,
                                               f'{await tag_user(message)}, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥:\n'
                                               f'üèµ +{line.split(".")[2]} –æ–ø—ã—Ç–∞\n'
                                               f'üíµ +{line.split(".")[1]}$\n'
                                               f'‚ùóÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ ‚ùóÔ∏è',
                                               disable_web_page_preview=True,
                                               parse_mode=types.ParseMode.HTML)
                    else:
                        await bot.send_message(message.chat.id,f'{await username(message)},–≤—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥', parse_mode='HTML')
                else:
                    await bot.send_message(message.chat.id,f'{await username(message)}, –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω', parse_mode='HTML')


# –í—ã–∏–≥—Ä—ã—à
async def win(message, rate_money, amount_money, koff, user_id):
    win_money = int(rate_money * koff)
    end_amount_money = win_money + int(amount_money)
    database.users.update_one({'id': user_id}, {'$set': {'cash': int(end_amount_money)}})
    await asyncio.sleep(4)
    await bot.send_message(message.chat.id, f'{await username(message)}, –≤–∞—à –≤—ã–∏–≥—Ä—ã—à ===> +' + str(
        f'{win_money:n}$'.replace(',', ' ')), parse_mode='HTML')


# –ü—Ä–æ–∏–≥—Ä—ã—à
async def lose(message, amount_money, rate_money, user_id):
    end_amount_money = int(amount_money) - rate_money
    database.users.update_one({'id': user_id}, {'$set': {'cash': int(end_amount_money)}})
    await asyncio.sleep(4)
    await bot.send_message(message.chat.id, f'{await username(message)}, –ø—Ä–æ–∏–≥—Ä—ã—à ===> -' + str(
        f'{rate_money:n}$'.replace(',', ' ')), parse_mode='HTML')


# –í—ã–∏–≥—Ä—ã—à —Å–ª–æ—Ç
async def win_slot(message, rate_money, amount_money, koff, user_id):
    win_money = int(rate_money * koff)
    end_amount_money = win_money + int(amount_money)
    database.users.update_one({'id': user_id}, {'$set': {'cash': int(end_amount_money)}})
    await asyncio.sleep(2)
    await bot.send_message(message.chat.id, f'{await username(message)}, –≤–∞—à –≤—ã–∏–≥—Ä—ã—à ===> +' + str(
        f'{win_money:n}$'.replace(',', ' ')), parse_mode='HTML')


# –ü—Ä–æ–∏–≥—Ä—ã—à —Å–ª–æ—Ç
async def lose_slot(message, amount_money, rate_money, user_id):
    end_amount_money = int(amount_money) - rate_money
    database.users.update_one({'id': user_id}, {'$set': {'cash': int(end_amount_money)}})
    await asyncio.sleep(2)
    await bot.send_message(message.chat.id, f'{await username(message)}, –ø—Ä–æ–∏–≥—Ä—ã—à ===> -' + str(
        f'{rate_money:n}$'.replace(',', ' ')), parse_mode='HTML')


# –§—É—Ç–±–æ–ª
@dp.message_handler(IsFootbal())
async def get_game_data(message):
    user_id = message.from_user.id
    await check_user(message)

    text = message.text.capitalize().split()
    value = text[1].split('–∫')
    money_num = value.pop(0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ (—Ü–∏—Ñ—Ä—ã –ø–µ—Ä–¥ –ö)
    amount_k = len(value)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ö (1–∫ == 1000)
    rate_money = int(money_num) * 1000 ** amount_k  # –°—Ç–∞–≤–∫–∞
    user_info = database.users.find_one({'id': user_id})
    amount_money = user_info['cash']
    if rate_money <= amount_money:
        amount_score = await bot.send_dice(message.chat.id, emoji='‚öΩ')
        if amount_score.dice.value == 3:
            await win(message, rate_money, amount_money, 0.5, user_id)
        elif amount_score.dice.value == 4:
            await win(message, rate_money, amount_money, 0.75, user_id)
        elif amount_score.dice.value == 5:
            await win(message, rate_money, amount_money, 1, user_id)
        else:
            await lose(message, amount_money, rate_money, user_id)
    else:
        enough_money = rate_money - int(amount_money)
        await bot.send_message(message.chat.id, f'{await username(message)}, –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: ' + f'{enough_money:n}$\n' + '–í–∞—à –±–∞–ª–∞–Ω—Å: ' + f'{amount_money:n}$', parse_mode='HTML')


# –ë–∞—Å–∫–µ—Ç–±–æ–ª
@dp.message_handler(IsBasketball())
async def get_game_data(message):
    user_id = message.from_user.id
    await check_user(message)

    text = message.text.capitalize().split()
    value = text[1].split('–∫')
    money_num = value.pop(0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ (—Ü–∏—Ñ—Ä—ã –ø–µ—Ä–¥ –ö)
    amount_k = len(value)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ö (1–∫ == 1000)
    rate_money = int(money_num) * 1000 ** amount_k  # –°—Ç–∞–≤–∫–∞
    user_info = database.users.find_one({'id': user_id})
    amount_money = user_info['cash']
    if rate_money <= amount_money:
        amount_score = await bot.send_dice(message.chat.id, emoji='üèÄ')
        if amount_score.dice.value == 4:
            await win(message, rate_money, amount_money, 0.5, user_id)
        elif amount_score.dice.value == 5:
            await win(message, rate_money, amount_money, 1, user_id)
        else:
            await lose(message, amount_money, rate_money, user_id)
    else:
        enough_money = rate_money - int(amount_money)
        await bot.send_message(message.chat.id,
                               f'{await username(message)}, –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: ' + f'{enough_money:n}$\n'.replace(',',
                                                                                                               ' ') + '–í–∞—à –±–∞–ª–∞–Ω—Å: ' + f'{amount_money:n}$'.replace(
                                   ',', ' '), parse_mode='HTML')


# –ö–æ—Å—Ç–∏
@dp.message_handler(IsDice())
async def dice(message):
    user_id = message.from_user.id
    await check_user(message)

    text = message.text.capitalize().split()
    value = text[1].split('–∫')
    money_num = value.pop(0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ (—Ü–∏—Ñ—Ä—ã –ø–µ—Ä–¥ –ö)
    amount_k = len(value)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ö (1–∫ == 1000)
    rate_money = int(money_num) * 1000 ** amount_k  # –°—Ç–∞–≤–∫–∞
    amount_point = text[2]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
    user_info = database.users.find_one({'id': user_id})
    amount_money = user_info['cash']
    if rate_money <= int(amount_money):
        amount_score = await bot.send_dice(message.chat.id, emoji='üé≤')
        if int(amount_point) == int(amount_score.dice.value):
            await win(message, rate_money, amount_money, 2, user_id)
        elif abs(int(amount_point) - amount_score.dice.value) == 1:
            await win(message, rate_money, amount_money, 0.5, user_id)
        else:
            await lose(message, amount_money, rate_money, user_id)
    else:
        enough_money = rate_money - int(amount_money)
        await bot.send_message(message.chat.id,
                               f'{await username(message)}, –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: ' + f'{enough_money:n}$\n'.replace(',',
                                                                                                               ' ') + '–í–∞—à –±–∞–ª–∞–Ω—Å: ' + f'{amount_money:n}$'.replace(
                                   ',', ' '), parse_mode='HTML')


# –î–∞—Ä—Ç—Å
@dp.message_handler(IsDarts())
async def darts(message):
    user_id = message.from_user.id
    await check_user(message)

    text = message.text.capitalize().split()
    value = text[1].split('–∫')
    money_num = value.pop(0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ (—Ü–∏—Ñ—Ä—ã –ø–µ—Ä–¥ –ö)
    amount_k = len(value)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ö (1–∫ == 1000)
    rate_money = int(money_num) * 1000 ** amount_k  # –°—Ç–∞–≤–∫–∞
    user_info = database.users.find_one({'id': user_id})
    amount_money = user_info['cash']
    if rate_money <= amount_money:
        amount_score = await bot.send_dice(message.chat.id, emoji='üéØ')
        if amount_score.dice.value == 6:
            await win(message, rate_money, amount_money, 2, user_id)
        elif amount_score.dice.value == 5:
            await win(message, rate_money, amount_money, 0.5, user_id)
        else:
            await lose(message, amount_money, rate_money, user_id)
    else:
        enough_money = rate_money - int(amount_money)
        await bot.send_message(message.chat.id,
                               f'{await username(message)}, –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: ' + f'{enough_money:n}$\n'.replace(',',
                                                                                                               ' ') + '–í–∞—à –±–∞–ª–∞–Ω—Å: ' + f'{amount_money:n}$'.replace(
                                   ',', ' '), parse_mode='HTML')


# –ë–æ—É–ª–∏–Ω–≥
@dp.message_handler(IsBowling())
async def bowling(message):
    user_id = message.from_user.id
    await check_user(message)

    text = message.text.capitalize().split()
    value = text[1].split('–∫')
    money_num = value.pop(0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ (—Ü–∏—Ñ—Ä—ã –ø–µ—Ä–¥ –ö)
    amount_k = len(value)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ö (1–∫ == 1000)
    rate_money = int(money_num) * 1000 ** amount_k  # –°—Ç–∞–≤–∫–∞
    user_info = database.users.find_one({'id': user_id})
    amount_money = user_info['cash']
    if rate_money <= amount_money:
        amount_score = await bot.send_dice(message.chat.id, emoji='üé≥')
        if amount_score.dice.value == 6:
            await win(message, rate_money, amount_money, 2, user_id)
        elif amount_score.dice.value == 5:
            await win(message, rate_money, amount_money, 1, user_id)
        else:
            await lose(message, amount_money, rate_money, user_id)
    else:
        enough_money = rate_money - int(amount_money)
        await bot.send_message(message.chat.id,
                               f'{await username(message)}, –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: ' + f'{enough_money:n}$\n'.replace(',',
                                                                                                               ' ') + '–í–∞—à –±–∞–ª–∞–Ω—Å: ' + f'{amount_money:n}$'.replace(
                                   ',', ' '), parse_mode='HTML')


# –°–ª–æ—Ç
@dp.message_handler(IsSlot())
async def slot(message):
    user_id = message.from_user.id
    await check_user(message)

    text = message.text.capitalize().split()
    value = text[1].split('–∫')
    money_num = value.pop(0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ (—Ü–∏—Ñ—Ä—ã –ø–µ—Ä–¥ –ö)
    amount_k = len(value)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ö (1–∫ == 1000)
    rate_money = int(money_num) * 1000 ** amount_k  # –°—Ç–∞–≤–∫–∞
    user_info = database.users.find_one({'id': user_id})
    amount_money = user_info['cash']
    if rate_money <= amount_money:
        amount_score = await bot.send_dice(message.chat.id, emoji='üé∞')

        if amount_score.dice.value == 64:
            await win_slot(message, rate_money, amount_money, 12, user_id)
        elif amount_score.dice.value in (1, 22, 43):
            await win_slot(message, rate_money, amount_money, 5, user_id)
        elif amount_score.dice.value in (16, 32, 48):
            await win_slot(message, rate_money, amount_money, 3, user_id)
        else:
            await lose_slot(message, amount_money, rate_money, user_id)
    else:
        enough_money = rate_money - amount_money
        await bot.send_message(message.chat.id,
                               f'{await username(message)}, –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: ' + f'{enough_money:n}$\n'.replace(',',
                                                                                                               ' ') + '–í–∞—à –±–∞–ª–∞–Ω—Å: ' + f'{amount_money:n}$'.replace(
                                   ',', ' '), parse_mode='HTML')


# –¢–û–ø —á–∞—Ç–∞
@dp.message_handler(content_types='text', text=['–¢–æ–ø —á–∞—Ç–∞', '—Ç–æ–ø —á–∞—Ç–∞'])
async def top(message):
    await check_user(message)
    msg_data = ['üèµ –¢–æ–ø 15 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ–ø—ã—Ç—É üèµ\n\n']
    users_info = database.users.find().sort('exp', -1)
    num = 1
    for user in users_info:
        msg_data.append(f'{num}. {await username_2(user["id"], user["username"])} - {user["exp"]} –æ–ø—ã—Ç–∞\n')
        num += 1
        if num == 16:
            await bot.send_message(message.chat.id, ''.join(msg_data), parse_mode='HTML')
            return


# –ú–æ–π —Ç–æ–ø
@dp.message_handler(content_types='text', text=['–¢–æ–ø', '—Ç–æ–ø'])
async def top(message):
    await check_user(message)
    users_info = database.users.find().sort('exp', -1)
    num = 1
    for user in users_info:
        if message.from_user.id == user['id']:
            await bot.send_message(message.chat.id, f'üèµ {await username(message)}, –≤–∞—à —Ç–æ–ø: {num} –º–µ—Å—Ç–æ üèµ',
                                   parse_mode='HTML')
            return
        else:
            num += 1


# –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
@dp.message_handler(commands='refer')
async def refer(message):
    await bot.send_message(message.chat.id, f'{await username(message)}, –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –≤–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç 2500$ –∏ 50 –æ–ø—ã—Ç–∞\n'
                                            f'–í–´ –ø–æ–ª—É—á–∏—Ç–µ 5000$ –∏ 100 –æ–ø—ã—Ç–∞\n'
                                            f'https://t.me/Mak023_bot?start={message.from_user.id}', parse_mode='HTML')


# –¢–µ–≥–∞–µ—Ç
async def username(message):
    if message.from_user.username is None:
        return f'<a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a>'
    else:
        return f'<a href="tg://user?id={message.from_user.id}">{message.from_user.username}</a>'


async def username_2(user_id, username):
    return f'<a href="tg://user?id={user_id}">{username}</a>'


# –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
async def check_user(message):
    user_id = message.from_user.id
    username = message.from_user.username
    firstname = message.from_user.first_name
    try:
        await message.delete()
    except:
        pass
    user = database.users.find_one({'id': user_id})
    if user is None:
        database.users.insert_one({'id': user_id,
                                   'cash': 0,
                                   'exp': 0,
                                   'president_country': '–Ω–µ—Ç',
                                   'citizen_country': '–Ω–µ—Ç',
                                   'job': '–Ω–µ—Ç',
                                   'working': False,
                                   'disease': False,
                                   'username': username,
                                   'firstname': firstname,
                                   'oil': 0,
                                   'food': 0})
    else:
        if message.from_user.username != user['username'] or message.from_user.first_name != user['firstname']:
            database.users.update_one({'id': user_id}, {'$set': {'username': username,
                                                                 'firstname': firstname}})


# –û—Ç–º–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–≥–∞–µ—Ç)
async def tag_user(message):
    tag = hlink(f'@{message.from_user.username}', f'https://t.me/{message.from_user.username}')
    return tag


# –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id
async def username_from_id(id):
    idname = await bot.get_chat(id)
    named = quote_html(idname.username)
    return named


# –î–æ–±–∞–≤–ª—è–µ—Ç –º–∏–Ω—É—Ç—ã –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏–µ
async def add_time_min(minute):
    tz = pytz.timezone('Etc/GMT-3')
    clock_in_half_hour = datetime.now(tz=tz) + timedelta(minutes=int(minute))
    return str(clock_in_half_hour).split('.')[0]

# –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è
async def start_vuz(user_id, name_job):
    educ_info = database.education.find_one({'id': user_id})
    user_info = database.users.find_one({'id': user_id})
    job_list = [i for i in educ_info['jobs'].split(' ')]
    job_list.append(name_job)
    # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
    database.education.update_one({'id': user_id}, {'$set': {'ucheb': '–Ω–µ—Ç',
                                                             'jobs': ' '.join(job_list)}})
    res_database.vuz.delete_one({'id': user_id})
    await bot.send_message(user_id, f'{await username_2(user_id, user_info["firstname"])}, –≤—ã –æ–∫–æ–Ω—á–∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –≤ –í–£–ó–µ "{name_job}"\n'
                                    f'–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è {name_job}', parse_mode='HTML')

scheduler = AsyncIOScheduler()
scheduler.start()
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    from handlers123 import job, bussiness, inline_cancel_bus, all, bonus, education
    from handlers123.shop import inline_shop
    from handlers123.jobs import autocreater, feldsher, predprinimatel, president, stroitel, krupye
    from handlers123 import joke

    # inline_get_job.register_handlers_jobs(dp)
    # inline_get_countries.register_handlers_countries(dp)
    inline_cancel_bus.register_handlers_cancel_bus(dp)
    # jobs
    autocreater.register_handlers_autocreater(dp)
    feldsher.register_handlers_feldsher(dp)
    predprinimatel.register_handlers_predprinimatel(dp)
    president.register_handlers_get_citizen(dp)
    stroitel.register_handlers_stroitel(dp)
    krupye.register_handlers_krupye(dp)
    # job
    job.register_handlers_countries(dp)
    # bussiness
    bussiness.register_handlers_bussiness(dp)
    # shop
    inline_shop.register_handlers_shop(dp)
    # education
    education.register_handler_education(dp)
    # joke
    joke.register_handlers_countries(dp)
    # bonus
    bonus.register_handlers_bonus(dp)

    # all
    all.reg_all(dp)

    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
